{
  "metadata": {
    "timestamp": "2025-04-26_16-32-10",
    "query_id": "query_2025-04-26_16-32-10",
    "original_query": "ssh",
    "optimized_query": "How to use the SSH command in Linux to connect to a remote server?",
    "query_intent": "The user wants to find the appropriate Linux command to establish an SSH (Secure Shell) connection.",
    "keywords": [
      "linux",
      "command",
      "ssh",
      "connect",
      "secure shell"
    ],
    "optimization_metrics": {
      "precision": 1.0,
      "recall": 0,
      "f1_score": 0,
      "retrieval_time": 0.009721994400024414,
      "command_count": 3,
      "diverse_categories": 1,
      "query_specificity": 0.5,
      "overall_score": 0.5461805669466655
    }
  },
  "retrieved_commands": [
    {
      "command": "ssh-agent",
      "description": "ssh-agent\nis a program to hold private keys used for public key\n       authentication.  through use of environment variables the agent\n       can be located and automatically used for authentication when\n       logging in to other machines using\nssh\n(1).\n\n       the options are as follows:\n-a\nbind_address\nbind the agent to the unix-domain socket\nbind_address\n.\n               the default is\n$tmpdir/ssh-xxxxxxxxxx/agent.<ppid>\n.\n-c\ngenerate c-shell commands on stdout.  this is the default\n               if shell looks like it's a csh style of shell.\n-d\nforeground mode.  when this option is specified,\nssh-agent\nwill not fork.\n-d\ndebug mode.  when this option is specified,\nssh-agent\nwill\n               not fork and will write debug information to standard\n               error.\n-e\nfingerprint_hash\nspecifies the hash algorithm used when displaying key\n               fingerprints.  valid options are: \u00e2\u0080\u009cmd5\u00e2\u0080\u009d and \u00e2\u0080\u009csha256\u00e2\u0080\u009d.  the\n               default is \u00e2\u0080\u009csha256\u00e2\u0080\u009d.\n-k\nkill the current agent (given by the ssh_agent_pid\n               environment variable).\n-o\noption\nspecify an option when starting\nssh-agent\n.  currently two\n               options are supported:\nallow-remote-pkcs11\nand\nno-restrict-websafe\n.\n\n               the\nallow-remote-pkcs11\noption allows clients of a\n               forwarded\nssh-agent\nto load pkcs#11 or fido provider\n               libraries.  by default only local clients may perform this\n               operation.  note that signalling that an\nssh-agent\nclient\n               is remote is performed by\nssh\n(1), and use of other tools\n               to forward access to the agent socket may circumvent this\n               restriction.\n\n               the\nno-restrict-websafe\noption instructs\nssh-agent\nto\n               permit signatures using fido keys that might be web\n               authentication requests.  by default,\nssh-agent\nrefuses\n               signature requests for fido keys where the key application\n               string does not start with \u00e2\u0080\u009cssh:\u00e2\u0080\u009d and when the data to be\n               signed does not appear to be a\nssh\n(1) user authentication\n               request or a\nssh-keygen\n(1) signature.  the default\n               behaviour prevents forwarded access to a fido key from\n               also implicitly forwarding the ability to authenticate to\n               websites.\n-p\nallowed_providers\nspecify a pattern-list of acceptable paths for pkcs#11\n               provider and fido authenticator middleware shared\n               libraries that may be used with the\n-s\nor\n-s\noptions to\nssh-add\n(1).  libraries that do not match the pattern list\n               will be refused.  see patterns in\nssh_config\n(5) for a\n               description of pattern-list syntax.  the default list is\n               \u00e2\u0080\u009cusr/lib*/*,/usr/local/lib*/*\u00e2\u0080\u009d.\n-s\ngenerate bourne shell commands on stdout.  this is the\n               default if shell does not look like it's a csh style of\n               shell.\n-t\nlife\nset a default value for the maximum lifetime of identities\n               added to the agent.  the lifetime may be specified in\n               seconds or in a time format specified in\nsshd_config\n(5).\n               a lifetime specified for an identity with\nssh-add\n(1)\n               overrides this value.  without this option the default\n               maximum lifetime is forever.\ncommand\n[\narg ...\n]\n               if a command (and optional arguments) is given, this is\n               executed as a subprocess of the agent.  the agent exits\n               automatically when the command given on the command line\n               terminates.\n\n       there are two main ways to get an agent set up.  the first is at\n       the start of an x session, where all other windows or programs are\n       started as children of the\nssh-agent\nprogram.  the agent starts a\n       command under which its environment variables are exported, for\n       example\nssh-agent xterm &\n.  when the command terminates, so does\n       the agent.\n\n       the second method is used for a login session.  when\nssh-agent\nis\n       started, it prints the shell commands required to set its\n       environment variables, which in turn can be evaluated in the\n       calling shell, for example\neval `ssh-agent -s`\n.\n\n       in both cases,\nssh\n(1) looks at these environment variables and\n       uses them to establish a connection to the agent.\n\n       the agent initially does not have any private keys.  keys are\n       added using\nssh-add\n(1) or by\nssh\n(1) when\naddkeystoagent\nis set in\nssh_config\n(5).  multiple identities may be stored in\nssh-agent\nconcurrently and\nssh\n(1) will automatically use them if present.\nssh-add\n(1) is also used to remove keys from\nssh-agent\nand to query\n       the keys that are held in one.\n\n       connections to\nssh-agent\nmay be forwarded from further remote\n       hosts using the\n-a\noption to\nssh\n(1) (but see the caveats\n       documented therein), avoiding the need for authentication data to\n       be stored on other machines.  authentication passphrases and\n       private keys never go over the network: the connection to the\n       agent is forwarded over ssh remote connections and the result is\n       returned to the requester, allowing the user access to their\n       identities anywhere in the network in a secure fashion.",
      "examples": "",
      "options": ""
    },
    {
      "command": "ssh-copy-id",
      "description": "ssh-copy-id\nis a script that uses\nssh\n(1) to log into a remote\n       machine (presumably using a login password, so password\n       authentication should be enabled, unless you've done some clever\n       use of multiple identities).  it assembles a list of one or more\n       fingerprints (as described below) and tries to log in with each\n       key, to see if any of them are already installed (of course, if\n       you are not using\nssh-agent\n(1) this may result in you being\n       repeatedly prompted for pass-phrases).  it then assembles a list\n       of those that failed to log in and, using\nssh\n(1), enables logins\n       with those keys on the remote server.  by default it adds the keys\n       by appending them to the remote user's\n~/.ssh/authorized_keys\n(creating the file, and directory, if necessary).  it is also\n       capable of detecting if the remote system is a netscreen, and\n       using its \u00e2\u0080\u0098set ssh pka-dsa key ...\u00e2\u0080\u0099 command instead.\n\n       the options are as follows:\n-i\n[\nidentity_file\n]\n               use only the key(s) contained in\nidentity_file\n(rather\n               than looking for identities via\nssh-add\n(1) or in the\ndefault_id_file\n).  if the filename does not end in\n.pub\nthis is added.  if the filename is omitted, the\ndefault_id_file\nis used.\n\n               note that this can be used to ensure that the keys copied\n               have the comment one prefers and/or extra options applied,\n               by ensuring that the key file has these set as preferred\n               before the copy is attempted.\n-f\nforced mode: doesn't check if the keys are present on the\n               remote server.  this means that it does not need the\n               private key.  of course, this can result in more than one\n               copy of the key being installed on the remote system.\n-n\ndo a dry-run.  instead of installing keys on the remote\n               system simply prints the key(s) that would have been\n               installed.\n-s\nsftp mode: usually the public keys are installed by\n               executing commands on the remote side.  with this option\n               the user's\n~/.ssh/authorized_keys\nfile will be downloaded,\n               modified locally and uploaded with sftp.  this option is\n               useful if the server has restrictions on commands which\n               can be used on the remote side.\n-t\ntarget_path\nthe path on the target system where the keys should be\n               added (defaults to \".ssh/authorized_keys\")\n-p\nport\nspecifies the port to connect to on the remote host.\n-f\nssh_config\n,\n-o\nssh_option\nthese options are simply passed through untouched (with\n               their argument) to ssh/sftp, allowing one to set an\n               alternative config file, or other options, respectively.\n\n               rather than specifying these as command line options, it\n               is often better to use (per-host) settings in\nssh\n(1)'s\n               configuration file:\nssh_config\n(5).\n-x\nthis option is for debugging the\nssh-copy-id\nscript\n               itself.  it sets the shell's -x flag, so that you can see\n               the commands being run.\n-h\n,\n-\n?  print usage summary\n\n       default behaviour without\n-i\n, is to check if \u00e2\u0080\u0098ssh-add -l\u00e2\u0080\u0099 provides\n       any output, and if so those keys are used.  note that this results\n       in the comment on the key being the filename that was given to\nssh-add\n(1) when the key was loaded into your\nssh-agent\n(1) rather\n       than the comment contained in that file, which is a bit of a\n       shame.  otherwise, if\nssh-add\n(1) provides no keys contents of the\ndefault_id_file\nwill be used.\n\n       the\ndefault_id_file\nis the most recent file that matches:\n~/.ssh/id*.pub\n, (excluding those that match\n~/.ssh/*-cert.pub\n) so\n       if you create a key that is not the one you want\nssh-copy-id\nto\n       use, just use\ntouch\n(1) on your preferred key's\n.pub\nfile to\n       reinstate it as the most recent.",
      "examples": "",
      "options": ""
    },
    {
      "command": "ssh",
      "description": "ssh\n(ssh client) is a program for logging into a remote machine\n       and for executing commands on a remote machine.  it is intended to\n       provide secure encrypted communications between two untrusted\n       hosts over an insecure network.  x11 connections, arbitrary tcp\n       ports and unix-domain sockets can also be forwarded over the\n       secure channel.\nssh\nconnects and logs into the specified\ndestination\n, which may be\n       specified as either [user@]hostname or a uri of the form\n       ssh://[user@]hostname[:port].  the user must prove their identity\n       to the remote machine using one of several methods (see below).\n\n       if a\ncommand\nis specified, it will be executed on the remote host\n       instead of a login shell.  a complete command line may be\n       specified as\ncommand\n, or it may have additional arguments.  if\n       supplied, the arguments will be appended to the command, separated\n       by spaces, before it is sent to the server to be executed.\n\n       the options are as follows:\n-4\nforces\nssh\nto use ipv4 addresses only.\n-6\nforces\nssh\nto use ipv6 addresses only.\n-a\nenables forwarding of connections from an authentication\n               agent such as\nssh-agent\n(1).  this can also be specified on\n               a per-host basis in a configuration file.\n\n               agent forwarding should be enabled with caution.  users\n               with the ability to bypass file permissions on the remote\n               host (for the agent's unix-domain socket) can access the\n               local agent through the forwarded connection.  an attacker\n               cannot obtain key material from the agent, however they\n               can perform operations on the keys that enable them to\n               authenticate using the identities loaded into the agent.\n               a safer alternative may be to use a jump host (see\n-j\n).\n-a\ndisables forwarding of the authentication agent\n               connection.\n-b\nbind_interface\nbind to the address of\nbind_interface\nbefore attempting to\n               connect to the destination host.  this is only useful on\n               systems with more than one address.\n-b\nbind_address\nuse\nbind_address\non the local machine as the source\n               address of the connection.  only useful on systems with\n               more than one address.\n-c\nrequests compression of all data (including stdin, stdout,\n               stderr, and data for forwarded x11, tcp and unix-domain\n               connections).  the compression algorithm is the same used\n               by\ngzip\n(1).  compression is desirable on modem lines and\n               other slow connections, but will only slow down things on\n               fast networks.  the default value can be set on a host-by-\n               host basis in the configuration files; see the\ncompression\noption in\nssh_config\n(5).\n-c\ncipher_spec\nselects the cipher specification for encrypting the\n               session.\ncipher_spec\nis a comma-separated list of ciphers\n               listed in order of preference.  see the\nciphers\nkeyword in\nssh_config\n(5) for more information.\n-d\n[\nbind_address\n:]\nport\nspecifies a local \u00e2\u0080\u009cdynamic\u00e2\u0080\u009d application-level port\n               forwarding.  this works by allocating a socket to listen\n               to\nport\non the local side, optionally bound to the\n               specified\nbind_address\n.  whenever a connection is made to\n               this port, the connection is forwarded over the secure\n               channel, and the application protocol is then used to\n               determine where to connect to from the remote machine.\n               currently the socks4 and socks5 protocols are supported,\n               and\nssh\nwill act as a socks server.  only root can forward\n               privileged ports.  dynamic port forwardings can also be\n               specified in the configuration file.\n\n               ipv6 addresses can be specified by enclosing the address\n               in square brackets.  only the superuser can forward\n               privileged ports.  by default, the local port is bound in\n               accordance with the\ngatewayports\nsetting.  however, an\n               explicit\nbind_address\nmay be used to bind the connection\n               to a specific address.  the\nbind_address\nof \u00e2\u0080\u009clocalhost\u00e2\u0080\u009d\n               indicates that the listening port be bound for local use\n               only, while an empty address or \u00e2\u0080\u0098*\u00e2\u0080\u0099 indicates that the\n               port should be available from all interfaces.\n-e\nlog_file\nappend debug logs to\nlog_file\ninstead of standard error.\n-e\nescape_char\nsets the escape character for sessions with a pty\n               (default: \u00e2\u0080\u0098~\u00e2\u0080\u0099).  the escape character is only recognized\n               at the beginning of a line.  the escape character followed\n               by a dot (\u00e2\u0080\u0098.\u00e2\u0080\u0099) closes the connection; followed by control-\n               z suspends the connection; and followed by itself sends\n               the escape character once.  setting the character to\n               \u00e2\u0080\u009cnone\u00e2\u0080\u009d disables any escapes and makes the session fully\n               transparent.\n-f\nconfigfile\nspecifies an alternative per-user configuration file.  if\n               a configuration file is given on the command line, the\n               system-wide configuration file (\n/etc/ssh/ssh_config\n) will\n               be ignored.  the default for the per-user configuration\n               file is\n~/.ssh/config\n.  if set to \u00e2\u0080\u009cnone\u00e2\u0080\u009d, no configuration\n               files will be read.\n-f\nrequests\nssh\nto go to background just before command\n               execution.  this is useful if\nssh\nis going to ask for\n               passwords or passphrases, but the user wants it in the\n               background.  this implies\n-n\n.  the recommended way to\n               start x11 programs at a remote site is with something like\nssh -f host xterm\n.\n\n               if the\nexitonforwardfailure\nconfiguration option is set to\n               \u00e2\u0080\u009cyes\u00e2\u0080\u009d, then a client started with\n-f\nwill wait for all\n               remote port forwards to be successfully established before\n               placing itself in the background.  refer to the\n               description of\nforkafterauthentication\nin\nssh_config\n(5)\n               for details.\n-g\ncauses\nssh\nto print its configuration after evaluating\nhost\nand\nmatch\nblocks and exit.\n-g\nallows remote hosts to connect to local forwarded ports.\n               if used on a multiplexed connection, then this option must\n               be specified on the master process.\n-i\npkcs11\nspecify the pkcs#11 shared library\nssh\nshould use to\n               communicate with a pkcs#11 token providing keys for user\n               authentication.\n-i\nidentity_file\nselects a file from which the identity (private key) for\n               public key authentication is read.  you can also specify a\n               public key file to use the corresponding private key that\n               is loaded in\nssh-agent\n(1) when the private key file is not\n               present locally.  the default is\n~/.ssh/id_rsa\n,\n~/.ssh/id_ecdsa\n,\n~/.ssh/id_ecdsa_sk\n,\n~/.ssh/id_ed25519\nand\n~/.ssh/id_ed25519_sk\n.  identity files may also be\n               specified on a per-host basis in the configuration file.\n               it is possible to have multiple\n-i\noptions (and multiple\n               identities specified in configuration files).  if no\n               certificates have been explicitly specified by the\ncertificatefile\ndirective,\nssh\nwill also try to load\n               certificate information from the filename obtained by\n               appending\n-cert.pub\nto identity filenames.\n-j\ndestination\nconnect to the target host by first making an\nssh\nconnection to the jump host described by\ndestination\nand\n               then establishing a tcp forwarding to the ultimate\n               destination from there.  multiple jump hops may be\n               specified separated by comma characters.  ipv6 addresses\n               can be specified by enclosing the address in square\n               brackets.  this is a shortcut to specify a\nproxyjump\nconfiguration directive.  note that configuration\n               directives supplied on the command-line generally apply to\n               the destination host and not any specified jump hosts.\n               use\n~/.ssh/config\nto specify configuration for jump hosts.\n-k\nenables gssapi-based authentication and forwarding\n               (delegation) of gssapi credentials to the server.\n-k\ndisables forwarding (delegation) of gssapi credentials to\n               the server.\n-l\n[\nbind_address\n:]\nport\n:\nhost\n:\nhostport\n-l\n[\nbind_address\n:]\nport\n:\nremote_socket\n-l\nlocal_socket\n:\nhost\n:\nhostport\n-l\nlocal_socket\n:\nremote_socket\nspecifies that connections to the given tcp port or unix\n               socket on the local (client) host are to be forwarded to\n               the given host and port, or unix socket, on the remote\n               side.  this works by allocating a socket to listen to\n               either a tcp\nport\non the local side, optionally bound to\n               the specified\nbind_address\n, or to a unix socket.  whenever\n               a connection is made to the local port or socket, the\n               connection is forwarded over the secure channel, and a\n               connection is made to either\nhost\nport\nhostport\n, or the\n               unix socket\nremote_socket\n, from the remote machine.\n\n               port forwardings can also be specified in the\n               configuration file.  only the superuser can forward\n               privileged ports.  ipv6 addresses can be specified by\n               enclosing the address in square brackets.\n\n               by default, the local port is bound in accordance with the\ngatewayports\nsetting.  however, an explicit\nbind_address\nmay be used to bind the connection to a specific address.\n               the\nbind_address\nof \u00e2\u0080\u009clocalhost\u00e2\u0080\u009d indicates that the\n               listening port be bound for local use only, while an empty\n               address or \u00e2\u0080\u0098*\u00e2\u0080\u0099 indicates that the port should be available\n               from all interfaces.\n-l\nlogin_name\nspecifies the user to log in as on the remote machine.\n               this also may be specified on a per-host basis in the\n               configuration file.\n-m\nplaces the\nssh\nclient into \u00e2\u0080\u009cmaster\u00e2\u0080\u009d mode for connection\n               sharing.  multiple\n-m\noptions places\nssh\ninto \u00e2\u0080\u009cmaster\u00e2\u0080\u009d\n               mode but with confirmation required using\nssh-askpass\n(1)\n               before each operation that changes the multiplexing state\n               (e.g. opening a new session).  refer to the description of\ncontrolmaster\nin\nssh_config\n(5) for details.\n-m\nmac_spec\na comma-separated list of mac (message authentication\n               code) algorithms, specified in order of preference.  see\n               the\nmacs\nkeyword in\nssh_config\n(5) for more information.\n-n\ndo not execute a remote command.  this is useful for just\n               forwarding ports.  refer to the description of\nsessiontype\nin\nssh_config\n(5) for details.\n-n\nredirects stdin from\n/dev/null\n(actually, prevents reading\n               from stdin).  this must be used when\nssh\nis run in the\n               background.  a common trick is to use this to run x11\n               programs on a remote machine.  for example,\nssh -n\nshadows.cs.hut.fi emacs &\nwill start an emacs on\n               shadows.cs.hut.fi, and the x11 connection will be\n               automatically forwarded over an encrypted channel.  the\nssh\nprogram will be put in the background.  (this does not\n               work if\nssh\nneeds to ask for a password or passphrase; see\n               also the\n-f\noption.)  refer to the description of\nstdinnull\nin\nssh_config\n(5) for details.\n-o\nctl_cmd\ncontrol an active connection multiplexing master process.\n               when the\n-o\noption is specified, the\nctl_cmd\nargument is\n               interpreted and passed to the master process.  valid\n               commands are: \u00e2\u0080\u009ccheck\u00e2\u0080\u009d (check that the master process is\n               running), \u00e2\u0080\u009cforward\u00e2\u0080\u009d (request forwardings without command\n               execution), \u00e2\u0080\u009ccancel\u00e2\u0080\u009d (cancel forwardings), \u00e2\u0080\u009cproxy\u00e2\u0080\u009d\n               (connect to a running multiplexing master in proxy mode),\n               \u00e2\u0080\u009cexit\u00e2\u0080\u009d (request the master to exit), and \u00e2\u0080\u009cstop\u00e2\u0080\u009d (request\n               the master to stop accepting further multiplexing\n               requests).\n-o\noption\ncan be used to give options in the format used in the\n               configuration file.  this is useful for specifying options\n               for which there is no separate command-line flag.  for\n               full details of the options listed below, and their\n               possible values, see\nssh_config\n(5).\n\n                     addkeystoagent\n                     addressfamily\n                     batchmode\n                     bindaddress\n                     canonicaldomains\n                     canonicalizefallbacklocal\n                     canonicalizehostname\n                     canonicalizemaxdots\n                     canonicalizepermittedcnames\n                     casignaturealgorithms\n                     certificatefile\n                     checkhostip\n                     ciphers\n                     clearallforwardings\n                     compression\n                     connectionattempts\n                     connecttimeout\n                     controlmaster\n                     controlpath\n                     controlpersist\n                     dynamicforward\n                     enableescapecommandline\n                     escapechar\n                     exitonforwardfailure\n                     fingerprinthash\n                     forkafterauthentication\n                     forwardagent\n                     forwardx11\n                     forwardx11timeout\n                     forwardx11trusted\n                     gatewayports\n                     globalknownhostsfile\n                     gssapiauthentication\n                     gssapidelegatecredentials\n                     hashknownhosts\n                     host\n                     hostbasedacceptedalgorithms\n                     hostbasedauthentication\n                     hostkeyalgorithms\n                     hostkeyalias\n                     hostname\n                     identitiesonly\n                     identityagent\n                     identityfile\n                     ipqos\n                     kbdinteractiveauthentication\n                     kbdinteractivedevices\n                     kexalgorithms\n                     knownhostscommand\n                     localcommand\n                     localforward\n                     loglevel\n                     macs\n                     match\n                     nohostauthenticationforlocalhost\n                     numberofpasswordprompts\n                     passwordauthentication\n                     permitlocalcommand\n                     permitremoteopen\n                     pkcs11provider\n                     port\n                     preferredauthentications\n                     proxycommand\n                     proxyjump\n                     proxyusefdpass\n                     pubkeyacceptedalgorithms\n                     pubkeyauthentication\n                     rekeylimit\n                     remotecommand\n                     remoteforward\n                     requesttty\n                     requiredrsasize\n                     sendenv\n                     serveraliveinterval\n                     serveralivecountmax\n                     sessiontype\n                     setenv\n                     stdinnull\n                     streamlocalbindmask\n                     streamlocalbindunlink\n                     stricthostkeychecking\n                     tcpkeepalive\n                     tunnel\n                     tunneldevice\n                     updatehostkeys\n                     user\n                     userknownhostsfile\n                     verifyhostkeydns\n                     visualhostkey\n                     xauthlocation\n-p\ntag\nspecify a tag name that may be used to select\n               configuration in\nssh_config\n(5).  refer to the\ntag\nand\nmatch\nkeywords in\nssh_config\n(5) for more information.\n-p\nport\nport to connect to on the remote host.  this can be\n               specified on a per-host basis in the configuration file.\n-q\nquery_option\nqueries for the algorithms supported by one of the\n               following features:\ncipher\n(supported symmetric ciphers),\ncipher-auth\n(supported symmetric ciphers that support\n               authenticated encryption),\nhelp\n(supported query terms for\n               use with the\n-q\nflag),\nmac\n(supported message integrity\n               codes),\nkex\n(key exchange algorithms),\nkey\n(key types),\nkey-ca-sign\n(valid ca signature algorithms for\n               certificates),\nkey-cert\n(certificate key types),\nkey-plain\n(non-certificate key types),\nkey-sig\n(all key types and\n               signature algorithms),\nprotocol-version\n(supported ssh\n               protocol versions), and\nsig\n(supported signature\n               algorithms).  alternatively, any keyword from\nssh_config\n(5) or\nsshd_config\n(5) that takes an algorithm\n               list may be used as an alias for the corresponding\n               query_option.\n-q\nquiet mode.  causes most warning and diagnostic messages\n               to be suppressed.\n-r\n[\nbind_address\n:]\nport\n:\nhost\n:\nhostport\n-r\n[\nbind_address\n:]\nport\n:\nlocal_socket\n-r\nremote_socket\n:\nhost\n:\nhostport\n-r\nremote_socket\n:\nlocal_socket\n-r\n[\nbind_address\n:]\nport\nspecifies that connections to the given tcp port or unix\n               socket on the remote (server) host are to be forwarded to\n               the local side.\n\n               this works by allocating a socket to listen to either a\n               tcp\nport\nor to a unix socket on the remote side.  whenever\n               a connection is made to this port or unix socket, the\n               connection is forwarded over the secure channel, and a\n               connection is made from the local machine to either an\n               explicit destination specified by\nhost\nport\nhostport\n, or\nlocal_socket\n, or, if no explicit destination was\n               specified,\nssh\nwill act as a socks 4/5 proxy and forward\n               connections to the destinations requested by the remote\n               socks client.\n\n               port forwardings can also be specified in the\n               configuration file.  privileged ports can be forwarded\n               only when logging in as root on the remote machine.  ipv6\n               addresses can be specified by enclosing the address in\n               square brackets.\n\n               by default, tcp listening sockets on the server will be\n               bound to the loopback interface only.  this may be\n               overridden by specifying a\nbind_address\n.  an empty\nbind_address\n, or the address \u00e2\u0080\u0098*\u00e2\u0080\u0099, indicates that the\n               remote socket should listen on all interfaces.  specifying\n               a remote\nbind_address\nwill only succeed if the server's\ngatewayports\noption is enabled (see\nsshd_config\n(5)).\n\n               if the\nport\nargument is \u00e2\u0080\u00980\u00e2\u0080\u0099, the listen port will be\n               dynamically allocated on the server and reported to the\n               client at run time.  when used together with\n-o forward\n,\n               the allocated port will be printed to the standard output.\n-s\nctl_path\nspecifies the location of a control socket for connection\n               sharing, or the string \u00e2\u0080\u009cnone\u00e2\u0080\u009d to disable connection\n               sharing.  refer to the description of\ncontrolpath\nand\ncontrolmaster\nin\nssh_config\n(5) for details.\n-s\nmay be used to request invocation of a subsystem on the\n               remote system.  subsystems facilitate the use of ssh as a\n               secure transport for other applications (e.g.\nsftp\n(1)).\n               the subsystem is specified as the remote command.  refer\n               to the description of\nsessiontype\nin\nssh_config\n(5) for\n               details.\n-t\ndisable pseudo-terminal allocation.\n-t\nforce pseudo-terminal allocation.  this can be used to\n               execute arbitrary screen-based programs on a remote\n               machine, which can be very useful, e.g. when implementing\n               menu services.  multiple\n-t\noptions force tty allocation,\n               even if\nssh\nhas no local tty.\n-v\ndisplay the version number and exit.\n-v\nverbose mode.  causes\nssh\nto print debugging messages\n               about its progress.  this is helpful in debugging\n               connection, authentication, and configuration problems.\n               multiple\n-v\noptions increase the verbosity.  the maximum\n               is 3.\n-w\nhost\n:\nport\nrequests that standard input and output on the client be\n               forwarded to\nhost\non\nport\nover the secure channel.\n               implies\n-n\n,\n-t\n,\nexitonforwardfailure\nand\nclearallforwardings\n, though these can be overridden in the\n               configuration file or using\n-o\ncommand line options.\n-w\nlocal_tun\n[:\nremote_tun\n]\n               requests tunnel device forwarding with the specified\ntun\n(4) devices between the client (\nlocal_tun\n) and the\n               server (\nremote_tun\n).\n\n               the devices may be specified by numerical id or the\n               keyword \u00e2\u0080\u009cany\u00e2\u0080\u009d, which uses the next available tunnel\n               device.  if\nremote_tun\nis not specified, it defaults to\n               \u00e2\u0080\u009cany\u00e2\u0080\u009d.  see also the\ntunnel\nand\ntunneldevice\ndirectives in\nssh_config\n(5).\n\n               if the\ntunnel\ndirective is unset, it will be set to the\n               default tunnel mode, which is \u00e2\u0080\u009cpoint-to-point\u00e2\u0080\u009d.  if a\n               different\ntunnel\nforwarding mode it desired, then it\n               should be specified before\n-w\n.\n-x\nenables x11 forwarding.  this can also be specified on a\n               per-host basis in a configuration file.\n\n               x11 forwarding should be enabled with caution.  users with\n               the ability to bypass file permissions on the remote host\n               (for the user's x authorization database) can access the\n               local x11 display through the forwarded connection.  an\n               attacker may then be able to perform activities such as\n               keystroke monitoring.\n\n               for this reason, x11 forwarding is subjected to x11\n               security extension restrictions by default.  refer to the\nssh -y\noption and the\nforwardx11trusted\ndirective in\nssh_config\n(5) for more information.\n-x\ndisables x11 forwarding.\n-y\nenables trusted x11 forwarding.  trusted x11 forwardings\n               are not subjected to the x11 security extension controls.\n-y\nsend log information using the\nsyslog\n(3) system module.\n               by default this information is sent to stderr.\nssh\nmay additionally obtain configuration data from a per-user\n       configuration file and a system-wide configuration file.  the file\n       format and configuration options are described in\nssh_config\n(5).",
      "examples": "",
      "options": ""
    },
    {
      "command": "ssh-keygen",
      "description": "ssh-keygen\ngenerates, manages and converts authentication keys for\nssh\n(1).\nssh-keygen\ncan create keys for use by ssh protocol\n       version 2.\n\n       the type of key to be generated is specified with the\n-t\noption.\n       if invoked without any arguments,\nssh-keygen\nwill generate an\n       ed25519 key.\nssh-keygen\nis also used to generate groups for use in diffie-\n       hellman group exchange (dh-gex).  see the \u00e2\u0080\u009cmoduli generation\u00e2\u0080\u009d\n       section for details.\n\n       finally,\nssh-keygen\ncan be used to generate and update key\n       revocation lists, and to test whether given keys have been revoked\n       by one.  see the \u00e2\u0080\u009ckey revocation lists\u00e2\u0080\u009d section for details.\n\n       normally each user wishing to use ssh with public key\n       authentication runs this once to create the authentication key in\n~/.ssh/id_ecdsa\n,\n~/.ssh/id_ecdsa_sk\n,\n~/.ssh/id_ed25519\n,\n~/.ssh/id_ed25519_sk\nor\n~/.ssh/id_rsa\n.  additionally, the system\n       administrator may use this to generate host keys, as seen in\n/etc/rc\n.\n\n       normally this program generates the key and asks for a file in\n       which to store the private key.  the public key is stored in a\n       file with the same name but \u00e2\u0080\u009c.pub\u00e2\u0080\u009d appended.  the program also\n       asks for a passphrase.  the passphrase may be empty to indicate no\n       passphrase (host keys must have an empty passphrase), or it may be\n       a string of arbitrary length.  a passphrase is similar to a\n       password, except it can be a phrase with a series of words,\n       punctuation, numbers, whitespace, or any string of characters you\n       want.  good passphrases are 10-30 characters long, are not simple\n       sentences or otherwise easily guessable (english prose has only\n       1-2 bits of entropy per character, and provides very bad\n       passphrases), and contain a mix of upper and lowercase letters,\n       numbers, and non-alphanumeric characters.  the passphrase can be\n       changed later by using the\n-p\noption.\n\n       there is no way to recover a lost passphrase.  if the passphrase\n       is lost or forgotten, a new key must be generated and the\n       corresponding public key copied to other machines.\nssh-keygen\nwill by default write keys in an openssh-specific\n       format.  this format is preferred as it offers better protection\n       for keys at rest as well as allowing storage of key comments\n       within the private key file itself.  the key comment may be useful\n       to help identify the key.  the comment is initialized to\n       \u00e2\u0080\u009cuser@host\u00e2\u0080\u009d when the key is created, but can be changed using the\n-c\noption.\n\n       it is still possible for\nssh-keygen\nto write the previously-used\n       pem format private keys using the\n-m\nflag.  this may be used when\n       generating new keys, and existing new-format keys may be converted\n       using this option in conjunction with the\n-p\n(change passphrase)\n       flag.\n\n       after a key is generated,\nssh-keygen\nwill ask where the keys\n       should be placed to be activated.\n\n       the options are as follows:\n-a\ngenerate host keys of all default key types (rsa, ecdsa,\n               and ed25519) if they do not already exist.  the host keys\n               are generated with the default key file path, an empty\n               passphrase, default bits for the key type, and default\n               comment.  if\n-f\nhas also been specified, its argument is\n               used as a prefix to the default path for the resulting\n               host key files.  this is used by\n/etc/rc\nto generate new\n               host keys.\n-a\nrounds\nwhen saving a private key, this option specifies the\n               number of kdf (key derivation function, currently\nbcrypt_pbkdf\n(3)) rounds used.  higher numbers result in\n               slower passphrase verification and increased resistance to\n               brute-force password cracking (should the keys be stolen).\n               the default is 16 rounds.\n-b\nshow the bubblebabble digest of specified private or\n               public key file.\n-b\nbits\nspecifies the number of bits in the key to create.  for\n               rsa keys, the minimum size is 1024 bits and the default is\n               3072 bits.  generally, 3072 bits is considered sufficient.\n               for ecdsa keys, the\n-b\nflag determines the key length by\n               selecting from one of three elliptic curve sizes: 256, 384\n               or 521 bits.  attempting to use bit lengths other than\n               these three values for ecdsa keys will fail.  ecdsa-sk,\n               ed25519 and ed25519-sk keys have a fixed length and the\n-b\nflag will be ignored.\n-c\ncomment\nprovides a new comment.\n-c\nrequests changing the comment in the private and public\n               key files.  the program will prompt for the file\n               containing the private keys, for the passphrase if the key\n               has one, and for the new comment.\n-d\npkcs11\ndownload the public keys provided by the pkcs#11 shared\n               library\npkcs11\n.  when used in combination with\n-s\n, this\n               option indicates that a ca key resides in a pkcs#11 token\n               (see the \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section for details).\n-e\nfingerprint_hash\nspecifies the hash algorithm used when displaying key\n               fingerprints.  valid options are: \u00e2\u0080\u009cmd5\u00e2\u0080\u009d and \u00e2\u0080\u009csha256\u00e2\u0080\u009d.  the\n               default is \u00e2\u0080\u009csha256\u00e2\u0080\u009d.\n-e\nthis option will read a private or public openssh key file\n               and print to stdout a public key in one of the formats\n               specified by the\n-m\noption.  the default export format is\n               \u00e2\u0080\u009crfc4716\u00e2\u0080\u009d.  this option allows exporting openssh keys for\n               use by other programs, including several commercial ssh\n               implementations.\n-f\nhostname\n|\n[hostname]:port\nsearch for the specified\nhostname\n(with optional port\n               number) in a\nknown_hosts\nfile, listing any occurrences\n               found.  this option is useful to find hashed host names or\n               addresses and may also be used in conjunction with the\n-h\noption to print found keys in a hashed format.\n-f\nfilename\nspecifies the filename of the key file.\n-g\nuse generic dns format when printing fingerprint resource\n               records using the\n-r\ncommand.\n-h\nhash a\nknown_hosts\nfile.  this replaces all hostnames and\n               addresses with hashed representations within the specified\n               file; the original content is moved to a file with a .old\n               suffix.  these hashes may be used normally by\nssh\nand\nsshd\n, but they do not reveal identifying information\n               should the file's contents be disclosed.  this option will\n               not modify existing hashed hostnames and is therefore safe\n               to use on files that mix hashed and non-hashed names.\n-h\nwhen signing a key, create a host certificate instead of a\n               user certificate.  see the \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section for\n               details.\n-i\ncertificate_identity\nspecify the key identity when signing a public key.  see\n               the \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section for details.\n-i\nthis option will read an unencrypted private (or public)\n               key file in the format specified by the\n-m\noption and\n               print an openssh compatible private (or public) key to\n               stdout.  this option allows importing keys from other\n               software, including several commercial ssh\n               implementations.  the default import format is \u00e2\u0080\u009crfc4716\u00e2\u0080\u009d.\n-k\ndownload resident keys from a fido authenticator.  public\n               and private key files will be written to the current\n               directory for each downloaded key.  if multiple fido\n               authenticators are attached, keys will be downloaded from\n               the first touched authenticator.  see the \u00e2\u0080\u009cfido\n               authenticator\u00e2\u0080\u009d section for more information.\n-k\ngenerate a krl file.  in this mode,\nssh-keygen\nwill\n               generate a krl file at the location specified via the\n-f\nflag that revokes every key or certificate presented on\n               the command line.  keys/certificates to be revoked may be\n               specified by public key file or using the format described\n               in the \u00e2\u0080\u009ckey revocation lists\u00e2\u0080\u009d section.\n-l\nprints the contents of one or more certificates.\n-l\nshow fingerprint of specified public key file.\nssh-keygen\nwill try to find the matching public key file and prints\n               its fingerprint.  if combined with\n-v\n, a visual ascii art\n               representation of the key is supplied with the\n               fingerprint.\n-m generate\ngenerate candidate diffie-hellman group exchange (dh-gex)\n               parameters for eventual use by the\n               \u00e2\u0080\u0098diffie-hellman-group-exchange-*\u00e2\u0080\u0099 key exchange methods.\n               the numbers generated by this operation must be further\n               screened before use.  see the \u00e2\u0080\u009cmoduli generation\u00e2\u0080\u009d section\n               for more information.\n-m screen\nscreen candidate parameters for diffie-hellman group\n               exchange.  this will accept a list of candidate numbers\n               and test that they are safe (sophie germain) primes with\n               acceptable group generators.  the results of this\n               operation may be added to the\n/etc/moduli\nfile.  see the\n               \u00e2\u0080\u009cmoduli generation\u00e2\u0080\u009d section for more information.\n-m\nkey_format\nspecify a key format for key generation, the\n-i\n(import),\n-e\n(export) conversion options, and the\n-p\nchange\n               passphrase operation.  the latter may be used to convert\n               between openssh private key and pem private key formats.\n               the supported key formats are: \u00e2\u0080\u009crfc4716\u00e2\u0080\u009d (rfc 4716/ssh2\n               public or private key), \u00e2\u0080\u009cpkcs8\u00e2\u0080\u009d (pkcs8 public or private\n               key) or \u00e2\u0080\u009cpem\u00e2\u0080\u009d (pem public key).  by default openssh will\n               write newly-generated private keys in its own format, but\n               when converting public keys for export the default format\n               is \u00e2\u0080\u009crfc4716\u00e2\u0080\u009d.  setting a format of \u00e2\u0080\u009cpem\u00e2\u0080\u009d when generating\n               or updating a supported private key type will cause the\n               key to be stored in the legacy pem private key format.\n-n\nnew_passphrase\nprovides the new passphrase.\n-n\nprincipals\nspecify one or more principals (user or host names) to be\n               included in a certificate when signing a key.  multiple\n               principals may be specified, separated by commas.  see the\n               \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section for details.\n-o\noption\nspecify a key/value option.  these are specific to the\n               operation that\nssh-keygen\nhas been requested to perform.\n\n               when signing certificates, one of the options listed in\n               the \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section may be specified here.\n\n               when performing moduli generation or screening, one of the\n               options listed in the \u00e2\u0080\u009cmoduli generation\u00e2\u0080\u009d section may be\n               specified.\n\n               when generating fido authenticator-backed keys, the\n               options listed in the \u00e2\u0080\u009cfido authenticator\u00e2\u0080\u009d section may be\n               specified.\n\n               when performing signature-related options using the\n-y\nflag, the following options are accepted:\nhashalg\n=\nalgorithm\nselects the hash algorithm to use for hashing the\n                       message to be signed.  valid algorithms are\n                       \u00e2\u0080\u009csha256\u00e2\u0080\u009d and \u00e2\u0080\u009csha512.\u00e2\u0080\u009d the default is \u00e2\u0080\u009csha512.\u00e2\u0080\u009d\nprint-pubkey\nprint the full public key to standard output after\n                       signature verification.\nverify-time\n=\ntimestamp\nspecifies a time to use when validating signatures\n                       instead of the current time.  the time may be\n                       specified as a date or time in the yyyymmdd[z] or\n                       in yyyymmddhhmm[ss][z] formats.  dates and times\n                       will be interpreted in the current system time\n                       zone unless suffixed with a z character, which\n                       causes them to be interpreted in the utc time\n                       zone.\n\n               when generating sshfp dns records from public keys using\n               the\n-r\nflag, the following options are accepted:\nhashalg\n=\nalgorithm\nselects a hash algorithm to use when printing\n                       sshfp records using the\n-d\nflag.  valid algorithms\n                       are \u00e2\u0080\u009csha1\u00e2\u0080\u009d and \u00e2\u0080\u009csha256\u00e2\u0080\u009d.  the default is to print\n                       both.\n\n               the\n-o\noption may be specified multiple times.\n-p\npassphrase\nprovides the (old) passphrase.\n-p\nrequests changing the passphrase of a private key file\n               instead of creating a new private key.  the program will\n               prompt for the file containing the private key, for the\n               old passphrase, and twice for the new passphrase.\n-q\ntest whether keys have been revoked in a krl.  if the\n-l\noption is also specified then the contents of the krl will\n               be printed.\n-q\nsilence\nssh-keygen\n.\n-r\nhostname\n|\n[hostname]:port\nremoves all keys belonging to the specified\nhostname\n(with\n               optional port number) from a\nknown_hosts\nfile.  this\n               option is useful to delete hashed hosts (see the\n-h\noption\n               above).\n-r\nhostname\nprint the sshfp fingerprint resource record named\nhostname\nfor the specified public key file.\n-s\nca_key\ncertify (sign) a public key using the specified ca key.\n               see the \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section for details.\n\n               when generating a krl,\n-s\nspecifies a path to a ca public\n               key file used to revoke certificates directly by key id or\n               serial number.  see the \u00e2\u0080\u009ckey revocation lists\u00e2\u0080\u009d section for\n               details.\n-t ecdsa\n|\necdsa-sk\n|\ned25519\n|\ned25519-sk\n|\nrsa\nspecifies the type of key to create.  the possible values\n               are \u00e2\u0080\u009cecdsa\u00e2\u0080\u009d, \u00e2\u0080\u009cecdsa-sk\u00e2\u0080\u009d, \u00e2\u0080\u009ced25519 (the default),\u00e2\u0080\u009d\n               \u00e2\u0080\u009ced25519-sk\u00e2\u0080\u009d, or \u00e2\u0080\u009crsa\u00e2\u0080\u009d.\n\n               this flag may also be used to specify the desired\n               signature type when signing certificates using an rsa ca\n               key.  the available rsa signature variants are \u00e2\u0080\u009cssh-rsa\u00e2\u0080\u009d\n               (sha1 signatures, not recommended), \u00e2\u0080\u009crsa-sha2-256\u00e2\u0080\u009d, and\n               \u00e2\u0080\u009crsa-sha2-512\u00e2\u0080\u009d (the default for rsa keys).\n-u\nwhen used in combination with\n-s\nor\n-y sign\n, this option\n               indicates that a ca key resides in a\nssh-agent\n(1).  see\n               the \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section for more information.\n-u\nupdate a krl.  when specified with\n-k\n, keys listed via the\n               command line are added to the existing krl rather than a\n               new krl being created.\n-v\nvalidity_interval\nspecify a validity interval when signing a certificate.  a\n               validity interval may consist of a single time, indicating\n               that the certificate is valid beginning now and expiring\n               at that time, or may consist of two times separated by a\n               colon to indicate an explicit time interval.\n\n               the start time may be specified as:\n\u00e2\u0080\u00a2\nthe string \u00e2\u0080\u009calways\u00e2\u0080\u009d to indicate the certificate has no\n                   specified start time.\n\u00e2\u0080\u00a2\na date or time in the system time zone formatted as\n                   yyyymmdd or yyyymmddhhmm[ss].\n\u00e2\u0080\u00a2\na date or time in the utc time zone as yyyymmddz or\n                   yyyymmddhhmm[ss]z.\n\u00e2\u0080\u00a2\na relative time before the current system time\n                   consisting of a minus sign followed by an interval in\n                   the format described in the time formats section of\nsshd_config\n(5).\n\u00e2\u0080\u00a2\na raw seconds since epoch (jan 1 1970 00:00:00 utc) as\n                   a hexadecimal number beginning with \u00e2\u0080\u009c0x\u00e2\u0080\u009d.\n\n               the end time may be specified similarly to the start time:\n\u00e2\u0080\u00a2\nthe string \u00e2\u0080\u009cforever\u00e2\u0080\u009d to indicate the certificate has\n                   no specified end time.\n\u00e2\u0080\u00a2\na date or time in the system time zone formatted as\n                   yyyymmdd or yyyymmddhhmm[ss].\n\u00e2\u0080\u00a2\na date or time in the utc time zone as yyyymmddz or\n                   yyyymmddhhmm[ss]z.\n\u00e2\u0080\u00a2\na relative time after the current system time\n                   consisting of a plus sign followed by an interval in\n                   the format described in the time formats section of\nsshd_config\n(5).\n\u00e2\u0080\u00a2\na raw seconds since epoch (jan 1 1970 00:00:00 utc) as\n                   a hexadecimal number beginning with \u00e2\u0080\u009c0x\u00e2\u0080\u009d.\n\n               for example:\n\n               +52w1d  valid from now to 52 weeks and one day from now.\n\n               -4w:+4w\n                       valid from four weeks ago to four weeks from now.\n\n               20100101123000:20110101123000\n                       valid from 12:30 pm, january 1st, 2010 to 12:30\n                       pm, january 1st, 2011.\n\n               20100101123000z:20110101123000z\n                       similar, but interpreted in the utc time zone\n                       rather than the system time zone.\n\n               -1d:20110101\n                       valid from yesterday to midnight, january 1st,\n                       2011.\n\n               0x1:0x2000000000\n                       valid from roughly early 1970 to may 2033.\n\n               -1m:forever\n                       valid from one minute ago and never expiring.\n-v\nverbose mode.  causes\nssh-keygen\nto print debugging\n               messages about its progress.  this is helpful for\n               debugging moduli generation.  multiple\n-v\noptions increase\n               the verbosity.  the maximum is 3.\n-w\nprovider\nspecifies a path to a library that will be used when\n               creating fido authenticator-hosted keys, overriding the\n               default of using the internal usb hid support.\n-y find-principals\nfind the principal(s) associated with the public key of a\n               signature, provided using the\n-s\nflag in an authorized\n               signers file provided using the\n-f\nflag.  the format of\n               the allowed signers file is documented in the \u00e2\u0080\u009callowed\n               signers\u00e2\u0080\u009d section below.  if one or more matching\n               principals are found, they are returned on standard\n               output.\n-y match-principals\nfind principal matching the principal name provided using\n               the\n-i\nflag in the authorized signers file specified using\n               the\n-f\nflag.  if one or more matching principals are\n               found, they are returned on standard output.\n-y check-novalidate\nchecks that a signature generated using\nssh-keygen -y sign\nhas a valid structure.  this does not validate if a\n               signature comes from an authorized signer.  when testing a\n               signature,\nssh-keygen\naccepts a message on standard input\n               and a signature namespace using\n-n\n.  a file containing the\n               corresponding signature must also be supplied using the\n-s\nflag.  successful testing of the signature is signalled by\nssh-keygen\nreturning a zero exit status.\n-y sign\ncryptographically sign a file or some data using an ssh\n               key.  when signing,\nssh-keygen\naccepts zero or more files\n               to sign on the command-line - if no files are specified\n               then\nssh-keygen\nwill sign data presented on standard\n               input.  signatures are written to the path of the input\n               file with \u00e2\u0080\u009c.sig\u00e2\u0080\u009d appended, or to standard output if the\n               message to be signed was read from standard input.\n\n               the key used for signing is specified using the\n-f\noption\n               and may refer to either a private key, or a public key\n               with the private half available via\nssh-agent\n(1).  an\n               additional signature namespace, used to prevent signature\n               confusion across different domains of use (e.g. file\n               signing vs email signing) must be provided via the\n-n\nflag.  namespaces are arbitrary strings, and may include:\n               \u00e2\u0080\u009cfile\u00e2\u0080\u009d for file signing, \u00e2\u0080\u009cemail\u00e2\u0080\u009d for email signing.  for\n               custom uses, it is recommended to use names following a\n               namespace@your.domain pattern to generate unambiguous\n               namespaces.\n-y verify\nrequest to verify a signature generated using\nssh-keygen\n-y sign\nas described above.  when verifying a signature,\nssh-keygen\naccepts a message on standard input and a\n               signature namespace using\n-n\n.  a file containing the\n               corresponding signature must also be supplied using the\n-s\nflag, along with the identity of the signer using\n-i\nand a\n               list of allowed signers via the\n-f\nflag.  the format of\n               the allowed signers file is documented in the \u00e2\u0080\u009callowed\n               signers\u00e2\u0080\u009d section below.  a file containing revoked keys\n               can be passed using the\n-r\nflag.  the revocation file may\n               be a krl or a one-per-line list of public keys.\n               successful verification by an authorized signer is\n               signalled by\nssh-keygen\nreturning a zero exit status.\n-y\nthis option will read a private openssh format file and\n               print an openssh public key to stdout.\n-z\ncipher\nspecifies the cipher to use for encryption when writing an\n               openssh-format private key file.  the list of available\n               ciphers may be obtained using \"ssh -q cipher\".  the\n               default is \u00e2\u0080\u009caes256-ctr\u00e2\u0080\u009d.\n-z\nserial_number\nspecifies a serial number to be embedded in the\n               certificate to distinguish this certificate from others\n               from the same ca.  if the\nserial_number\nis prefixed with a\n               \u00e2\u0080\u0098+\u00e2\u0080\u0099 character, then the serial number will be incremented\n               for each certificate signed on a single command-line.  the\n               default serial number is zero.\n\n               when generating a krl, the\n-z\nflag is used to specify a\n               krl version number.",
      "examples": "",
      "options": ""
    },
    {
      "command": "sftp",
      "description": "sftp\nis a file transfer program, similar to\nftp\n(1), which performs\n       all operations over an encrypted\nssh\n(1) transport.  it may also\n       use many features of ssh, such as public key authentication and\n       compression.\n\n       the\ndestination\nmay be specified either as [user@]host[:path] or\n       as a uri in the form sftp://[user@]host[:port][/path].\n\n       if the\ndestination\nincludes a\npath\nand it is not a directory,\nsftp\nwill retrieve files automatically if a non-interactive\n       authentication method is used; otherwise it will do so after\n       successful interactive authentication.\n\n       if no\npath\nis specified, or if the\npath\nis a directory,\nsftp\nwill\n       log in to the specified\nhost\nand enter interactive command mode,\n       changing to the remote directory if one was specified.  an\n       optional trailing slash can be used to force the\npath\nto be\n       interpreted as a directory.\n\n       since the destination formats use colon characters to delimit host\n       names from path names or port numbers, ipv6 addresses must be\n       enclosed in square brackets to avoid ambiguity.\n\n       the options are as follows:\n-4\nforces\nsftp\nto use ipv4 addresses only.\n-6\nforces\nsftp\nto use ipv6 addresses only.\n-a\nallows forwarding of\nssh-agent\n(1) to the remote system.\n               the default is not to forward an authentication agent.\n-a\nattempt to continue interrupted transfers rather than\n               overwriting existing partial or complete copies of files.\n               if the partial contents differ from those being\n               transferred, then the resultant file is likely to be\n               corrupt.\n-b\nbuffer_size\nspecify the size of the buffer that\nsftp\nuses when\n               transferring files.  larger buffers require fewer round\n               trips at the cost of higher memory consumption.  the\n               default is 32768 bytes.\n-b\nbatchfile\nbatch mode reads a series of commands from an input\nbatchfile\ninstead of\nstdin\n.  since it lacks user\n               interaction, it should be used in conjunction with non-\n               interactive authentication to obviate the need to enter a\n               password at connection time (see\nsshd\n(8) and\nssh-keygen\n(1)\n               for details).\n\n               a\nbatchfile\nof \u00e2\u0080\u0098-\u00e2\u0080\u0099 may be used to indicate standard input.\nsftp\nwill abort if any of the following commands fail:\nget\n,\nput\n,\nreget\n,\nreput\n,\nrename\n,\nln\n,\nrm\n,\nmkdir\n,\nchdir\n,\nls\n,\nlchdir\n,\ncopy\n,\ncp\n,\nchmod\n,\nchown\n,\nchgrp\n,\nlpwd\n,\ndf\n,\nsymlink\n,\n               and\nlmkdir\n.\n\n               termination on error can be suppressed on a command by\n               command basis by prefixing the command with a \u00e2\u0080\u0098-\u00e2\u0080\u0099\n               character (for example,\n-rm /tmp/blah*\n).  echo of the\n               command may be suppressed by prefixing the command with a\n               \u00e2\u0080\u0098@\u00e2\u0080\u0099 character.  these two prefixes may be combined in any\n               order, for example\n-@ls /bsd\n.\n-c\nenables compression (via ssh's\n-c\nflag).\n-c\ncipher\nselects the cipher to use for encrypting the data\n               transfers.  this option is directly passed to\nssh\n(1).\n-d\nsftp_server_command\nconnect directly to a local sftp server (rather than via\nssh\n(1)).  a command and arguments may be specified, for\n               example \"/path/sftp-server -el debug3\".  this option may\n               be useful in debugging the client and server.\n-f\nssh_config\nspecifies an alternative per-user configuration file for\nssh\n(1).  this option is directly passed to\nssh\n(1).\n-f\nrequests that files be flushed to disk immediately after\n               transfer.  when uploading files, this feature is only\n               enabled if the server implements the \"fsync@openssh.com\"\n               extension.\n-i\nidentity_file\nselects the file from which the identity (private key) for\n               public key authentication is read.  this option is\n               directly passed to\nssh\n(1).\n-j\ndestination\nconnect to the target host by first making an\nsftp\nconnection to the jump host described by\ndestination\nand\n               then establishing a tcp forwarding to the ultimate\n               destination from there.  multiple jump hops may be\n               specified separated by comma characters.  this is a\n               shortcut to specify a\nproxyjump\nconfiguration directive.\n               this option is directly passed to\nssh\n(1).\n-l\nlimit\nlimits the used bandwidth, specified in kbit/s.\n-n\ndisables quiet mode, e.g. to override the implicit quiet\n               mode set by the\n-b\nflag.\n-o\nssh_option\ncan be used to pass options to\nssh\nin the format used in\nssh_config\n(5).  this is useful for specifying options for\n               which there is no separate\nsftp\ncommand-line flag.  for\n               example, to specify an alternate port use:\nsftp -oport=24\n.\n               for full details of the options listed below, and their\n               possible values, see\nssh_config\n(5).\n\n                     addressfamily\n                     batchmode\n                     bindaddress\n                     bindinterface\n                     canonicaldomains\n                     canonicalizefallbacklocal\n                     canonicalizehostname\n                     canonicalizemaxdots\n                     canonicalizepermittedcnames\n                     casignaturealgorithms\n                     certificatefile\n                     checkhostip\n                     ciphers\n                     compression\n                     connectionattempts\n                     connecttimeout\n                     controlmaster\n                     controlpath\n                     controlpersist\n                     globalknownhostsfile\n                     gssapiauthentication\n                     gssapidelegatecredentials\n                     hashknownhosts\n                     host\n                     hostbasedacceptedalgorithms\n                     hostbasedauthentication\n                     hostkeyalgorithms\n                     hostkeyalias\n                     hostname\n                     identitiesonly\n                     identityagent\n                     identityfile\n                     ipqos\n                     kbdinteractiveauthentication\n                     kbdinteractivedevices\n                     kexalgorithms\n                     knownhostscommand\n                     loglevel\n                     macs\n                     nohostauthenticationforlocalhost\n                     numberofpasswordprompts\n                     passwordauthentication\n                     pkcs11provider\n                     port\n                     preferredauthentications\n                     proxycommand\n                     proxyjump\n                     pubkeyacceptedalgorithms\n                     pubkeyauthentication\n                     rekeylimit\n                     requiredrsasize\n                     sendenv\n                     serveraliveinterval\n                     serveralivecountmax\n                     setenv\n                     stricthostkeychecking\n                     tcpkeepalive\n                     updatehostkeys\n                     user\n                     userknownhostsfile\n                     verifyhostkeydns\n-p\nport\nspecifies the port to connect to on the remote host.\n-p\npreserves modification times, access times, and modes from\n               the original files transferred.\n-q\nquiet mode: disables the progress meter as well as warning\n               and diagnostic messages from\nssh\n(1).\n-r\nnum_requests\nspecify how many requests may be outstanding at any one\n               time.  increasing this may slightly improve file transfer\n               speed but will increase memory usage.  the default is 64\n               outstanding requests.\n-r\nrecursively copy entire directories when uploading and\n               downloading.  note that\nsftp\ndoes not follow symbolic\n               links encountered in the tree traversal.\n-s\nprogram\nname of the\nprogram\nto use for the encrypted connection.\n               the program must understand\nssh\n(1) options.\n-s\nsubsystem\n|\nsftp_server\nspecifies the ssh2 subsystem or the path for an sftp\n               server on the remote host.  a path is useful when the\n               remote\nsshd\n(8) does not have an sftp subsystem configured.\n-v\nraise logging level.  this option is also passed to ssh.\n-x\nsftp_option\nspecify an option that controls aspects of sftp protocol\n               behaviour.  the valid options are:\nnrequests\n=\nvalue\ncontrols how many concurrent sftp read or write\n                       requests may be in progress at any point in time\n                       during a download or upload.  by default 64\n                       requests may be active concurrently.\nbuffer\n=\nvalue\ncontrols the maximum buffer size for a single sftp\n                       read/write operation used during download or\n                       upload.  by default a 32kb buffer is used.",
      "examples": "",
      "options": ""
    }
  ],
  "context": "Retrieved commands:\n\nCommand: ssh-agent\nDescription: ssh-agent\nis a program to hold private keys used for public key\n       authentication.  through use of environment variables the agent\n       can be located and automatically used for authentication when\n       logging in to other machines using\nssh\n(1).\n\n       the options are as follows:\n-a\nbind_address\nbind the agent to the unix-domain socket\nbind_address\n.\n               the default is\n$tmpdir/ssh-xxxxxxxxxx/agent.<ppid>\n.\n-c\ngenerate c-shell commands on stdout.  this is the default\n               if shell looks like it's a csh style of shell.\n-d\nforeground mode.  when this option is specified,\nssh-agent\nwill not fork.\n-d\ndebug mode.  when this option is specified,\nssh-agent\nwill\n               not fork and will write debug information to standard\n               error.\n-e\nfingerprint_hash\nspecifies the hash algorithm used when displaying key\n               fingerprints.  valid options are: \u00e2\u0080\u009cmd5\u00e2\u0080\u009d and \u00e2\u0080\u009csha256\u00e2\u0080\u009d.  the\n               default is \u00e2\u0080\u009csha256\u00e2\u0080\u009d.\n-k\nkill the current agent (given by the ssh_agent_pid\n               environment variable).\n-o\noption\nspecify an option when starting\nssh-agent\n.  currently two\n               options are supported:\nallow-remote-pkcs11\nand\nno-restrict-websafe\n.\n\n               the\nallow-remote-pkcs11\noption allows clients of a\n               forwarded\nssh-agent\nto load pkcs#11 or fido provider\n               libraries.  by default only local clients may perform this\n               operation.  note that signalling that an\nssh-agent\nclient\n               is remote is performed by\nssh\n(1), and use of other tools\n               to forward access to the agent socket may circumvent this\n               restriction.\n\n               the\nno-restrict-websafe\noption instructs\nssh-agent\nto\n               permit signatures using fido keys that might be web\n               authentication requests.  by default,\nssh-agent\nrefuses\n               signature requests for fido keys where the key application\n               string does not start with \u00e2\u0080\u009cssh:\u00e2\u0080\u009d and when the data to be\n               signed does not appear to be a\nssh\n(1) user authentication\n               request or a\nssh-keygen\n(1) signature.  the default\n               behaviour prevents forwarded access to a fido key from\n               also implicitly forwarding the ability to authenticate to\n               websites.\n-p\nallowed_providers\nspecify a pattern-list of acceptable paths for pkcs#11\n               provider and fido authenticator middleware shared\n               libraries that may be used with the\n-s\nor\n-s\noptions to\nssh-add\n(1).  libraries that do not match the pattern list\n               will be refused.  see patterns in\nssh_config\n(5) for a\n               description of pattern-list syntax.  the default list is\n               \u00e2\u0080\u009cusr/lib*/*,/usr/local/lib*/*\u00e2\u0080\u009d.\n-s\ngenerate bourne shell commands on stdout.  this is the\n               default if shell does not look like it's a csh style of\n               shell.\n-t\nlife\nset a default value for the maximum lifetime of identities\n               added to the agent.  the lifetime may be specified in\n               seconds or in a time format specified in\nsshd_config\n(5).\n               a lifetime specified for an identity with\nssh-add\n(1)\n               overrides this value.  without this option the default\n               maximum lifetime is forever.\ncommand\n[\narg ...\n]\n               if a command (and optional arguments) is given, this is\n               executed as a subprocess of the agent.  the agent exits\n               automatically when the command given on the command line\n               terminates.\n\n       there are two main ways to get an agent set up.  the first is at\n       the start of an x session, where all other windows or programs are\n       started as children of the\nssh-agent\nprogram.  the agent starts a\n       command under which its environment variables are exported, for\n       example\nssh-agent xterm &\n.  when the command terminates, so does\n       the agent.\n\n       the second method is used for a login session.  when\nssh-agent\nis\n       started, it prints the shell commands required to set its\n       environment variables, which in turn can be evaluated in the\n       calling shell, for example\neval `ssh-agent -s`\n.\n\n       in both cases,\nssh\n(1) looks at these environment variables and\n       uses them to establish a connection to the agent.\n\n       the agent initially does not have any private keys.  keys are\n       added using\nssh-add\n(1) or by\nssh\n(1) when\naddkeystoagent\nis set in\nssh_config\n(5).  multiple identities may be stored in\nssh-agent\nconcurrently and\nssh\n(1) will automatically use them if present.\nssh-add\n(1) is also used to remove keys from\nssh-agent\nand to query\n       the keys that are held in one.\n\n       connections to\nssh-agent\nmay be forwarded from further remote\n       hosts using the\n-a\noption to\nssh\n(1) (but see the caveats\n       documented therein), avoiding the need for authentication data to\n       be stored on other machines.  authentication passphrases and\n       private keys never go over the network: the connection to the\n       agent is forwarded over ssh remote connections and the result is\n       returned to the requester, allowing the user access to their\n       identities anywhere in the network in a secure fashion.\nRelevant sections:\n- \n- \n- \n- \n\n---\n\nCommand: ssh-copy-id\nDescription: ssh-copy-id\nis a script that uses\nssh\n(1) to log into a remote\n       machine (presumably using a login password, so password\n       authentication should be enabled, unless you've done some clever\n       use of multiple identities).  it assembles a list of one or more\n       fingerprints (as described below) and tries to log in with each\n       key, to see if any of them are already installed (of course, if\n       you are not using\nssh-agent\n(1) this may result in you being\n       repeatedly prompted for pass-phrases).  it then assembles a list\n       of those that failed to log in and, using\nssh\n(1), enables logins\n       with those keys on the remote server.  by default it adds the keys\n       by appending them to the remote user's\n~/.ssh/authorized_keys\n(creating the file, and directory, if necessary).  it is also\n       capable of detecting if the remote system is a netscreen, and\n       using its \u00e2\u0080\u0098set ssh pka-dsa key ...\u00e2\u0080\u0099 command instead.\n\n       the options are as follows:\n-i\n[\nidentity_file\n]\n               use only the key(s) contained in\nidentity_file\n(rather\n               than looking for identities via\nssh-add\n(1) or in the\ndefault_id_file\n).  if the filename does not end in\n.pub\nthis is added.  if the filename is omitted, the\ndefault_id_file\nis used.\n\n               note that this can be used to ensure that the keys copied\n               have the comment one prefers and/or extra options applied,\n               by ensuring that the key file has these set as preferred\n               before the copy is attempted.\n-f\nforced mode: doesn't check if the keys are present on the\n               remote server.  this means that it does not need the\n               private key.  of course, this can result in more than one\n               copy of the key being installed on the remote system.\n-n\ndo a dry-run.  instead of installing keys on the remote\n               system simply prints the key(s) that would have been\n               installed.\n-s\nsftp mode: usually the public keys are installed by\n               executing commands on the remote side.  with this option\n               the user's\n~/.ssh/authorized_keys\nfile will be downloaded,\n               modified locally and uploaded with sftp.  this option is\n               useful if the server has restrictions on commands which\n               can be used on the remote side.\n-t\ntarget_path\nthe path on the target system where the keys should be\n               added (defaults to \".ssh/authorized_keys\")\n-p\nport\nspecifies the port to connect to on the remote host.\n-f\nssh_config\n,\n-o\nssh_option\nthese options are simply passed through untouched (with\n               their argument) to ssh/sftp, allowing one to set an\n               alternative config file, or other options, respectively.\n\n               rather than specifying these as command line options, it\n               is often better to use (per-host) settings in\nssh\n(1)'s\n               configuration file:\nssh_config\n(5).\n-x\nthis option is for debugging the\nssh-copy-id\nscript\n               itself.  it sets the shell's -x flag, so that you can see\n               the commands being run.\n-h\n,\n-\n?  print usage summary\n\n       default behaviour without\n-i\n, is to check if \u00e2\u0080\u0098ssh-add -l\u00e2\u0080\u0099 provides\n       any output, and if so those keys are used.  note that this results\n       in the comment on the key being the filename that was given to\nssh-add\n(1) when the key was loaded into your\nssh-agent\n(1) rather\n       than the comment contained in that file, which is a bit of a\n       shame.  otherwise, if\nssh-add\n(1) provides no keys contents of the\ndefault_id_file\nwill be used.\n\n       the\ndefault_id_file\nis the most recent file that matches:\n~/.ssh/id*.pub\n, (excluding those that match\n~/.ssh/*-cert.pub\n) so\n       if you create a key that is not the one you want\nssh-copy-id\nto\n       use, just use\ntouch\n(1) on your preferred key's\n.pub\nfile to\n       reinstate it as the most recent.\nRelevant sections:\n- \n\n---\n\nCommand: ssh\nDescription: ssh\n(ssh client) is a program for logging into a remote machine\n       and for executing commands on a remote machine.  it is intended to\n       provide secure encrypted communications between two untrusted\n       hosts over an insecure network.  x11 connections, arbitrary tcp\n       ports and unix-domain sockets can also be forwarded over the\n       secure channel.\nssh\nconnects and logs into the specified\ndestination\n, which may be\n       specified as either [user@]hostname or a uri of the form\n       ssh://[user@]hostname[:port].  the user must prove their identity\n       to the remote machine using one of several methods (see below).\n\n       if a\ncommand\nis specified, it will be executed on the remote host\n       instead of a login shell.  a complete command line may be\n       specified as\ncommand\n, or it may have additional arguments.  if\n       supplied, the arguments will be appended to the command, separated\n       by spaces, before it is sent to the server to be executed.\n\n       the options are as follows:\n-4\nforces\nssh\nto use ipv4 addresses only.\n-6\nforces\nssh\nto use ipv6 addresses only.\n-a\nenables forwarding of connections from an authentication\n               agent such as\nssh-agent\n(1).  this can also be specified on\n               a per-host basis in a configuration file.\n\n               agent forwarding should be enabled with caution.  users\n               with the ability to bypass file permissions on the remote\n               host (for the agent's unix-domain socket) can access the\n               local agent through the forwarded connection.  an attacker\n               cannot obtain key material from the agent, however they\n               can perform operations on the keys that enable them to\n               authenticate using the identities loaded into the agent.\n               a safer alternative may be to use a jump host (see\n-j\n).\n-a\ndisables forwarding of the authentication agent\n               connection.\n-b\nbind_interface\nbind to the address of\nbind_interface\nbefore attempting to\n               connect to the destination host.  this is only useful on\n               systems with more than one address.\n-b\nbind_address\nuse\nbind_address\non the local machine as the source\n               address of the connection.  only useful on systems with\n               more than one address.\n-c\nrequests compression of all data (including stdin, stdout,\n               stderr, and data for forwarded x11, tcp and unix-domain\n               connections).  the compression algorithm is the same used\n               by\ngzip\n(1).  compression is desirable on modem lines and\n               other slow connections, but will only slow down things on\n               fast networks.  the default value can be set on a host-by-\n               host basis in the configuration files; see the\ncompression\noption in\nssh_config\n(5).\n-c\ncipher_spec\nselects the cipher specification for encrypting the\n               session.\ncipher_spec\nis a comma-separated list of ciphers\n               listed in order of preference.  see the\nciphers\nkeyword in\nssh_config\n(5) for more information.\n-d\n[\nbind_address\n:]\nport\nspecifies a local \u00e2\u0080\u009cdynamic\u00e2\u0080\u009d application-level port\n               forwarding.  this works by allocating a socket to listen\n               to\nport\non the local side, optionally bound to the\n               specified\nbind_address\n.  whenever a connection is made to\n               this port, the connection is forwarded over the secure\n               channel, and the application protocol is then used to\n               determine where to connect to from the remote machine.\n               currently the socks4 and socks5 protocols are supported,\n               and\nssh\nwill act as a socks server.  only root can forward\n               privileged ports.  dynamic port forwardings can also be\n               specified in the configuration file.\n\n               ipv6 addresses can be specified by enclosing the address\n               in square brackets.  only the superuser can forward\n               privileged ports.  by default, the local port is bound in\n               accordance with the\ngatewayports\nsetting.  however, an\n               explicit\nbind_address\nmay be used to bind the connection\n               to a specific address.  the\nbind_address\nof \u00e2\u0080\u009clocalhost\u00e2\u0080\u009d\n               indicates that the listening port be bound for local use\n               only, while an empty address or \u00e2\u0080\u0098*\u00e2\u0080\u0099 indicates that the\n               port should be available from all interfaces.\n-e\nlog_file\nappend debug logs to\nlog_file\ninstead of standard error.\n-e\nescape_char\nsets the escape character for sessions with a pty\n               (default: \u00e2\u0080\u0098~\u00e2\u0080\u0099).  the escape character is only recognized\n               at the beginning of a line.  the escape character followed\n               by a dot (\u00e2\u0080\u0098.\u00e2\u0080\u0099) closes the connection; followed by control-\n               z suspends the connection; and followed by itself sends\n               the escape character once.  setting the character to\n               \u00e2\u0080\u009cnone\u00e2\u0080\u009d disables any escapes and makes the session fully\n               transparent.\n-f\nconfigfile\nspecifies an alternative per-user configuration file.  if\n               a configuration file is given on the command line, the\n               system-wide configuration file (\n/etc/ssh/ssh_config\n) will\n               be ignored.  the default for the per-user configuration\n               file is\n~/.ssh/config\n.  if set to \u00e2\u0080\u009cnone\u00e2\u0080\u009d, no configuration\n               files will be read.\n-f\nrequests\nssh\nto go to background just before command\n               execution.  this is useful if\nssh\nis going to ask for\n               passwords or passphrases, but the user wants it in the\n               background.  this implies\n-n\n.  the recommended way to\n               start x11 programs at a remote site is with something like\nssh -f host xterm\n.\n\n               if the\nexitonforwardfailure\nconfiguration option is set to\n               \u00e2\u0080\u009cyes\u00e2\u0080\u009d, then a client started with\n-f\nwill wait for all\n               remote port forwards to be successfully established before\n               placing itself in the background.  refer to the\n               description of\nforkafterauthentication\nin\nssh_config\n(5)\n               for details.\n-g\ncauses\nssh\nto print its configuration after evaluating\nhost\nand\nmatch\nblocks and exit.\n-g\nallows remote hosts to connect to local forwarded ports.\n               if used on a multiplexed connection, then this option must\n               be specified on the master process.\n-i\npkcs11\nspecify the pkcs#11 shared library\nssh\nshould use to\n               communicate with a pkcs#11 token providing keys for user\n               authentication.\n-i\nidentity_file\nselects a file from which the identity (private key) for\n               public key authentication is read.  you can also specify a\n               public key file to use the corresponding private key that\n               is loaded in\nssh-agent\n(1) when the private key file is not\n               present locally.  the default is\n~/.ssh/id_rsa\n,\n~/.ssh/id_ecdsa\n,\n~/.ssh/id_ecdsa_sk\n,\n~/.ssh/id_ed25519\nand\n~/.ssh/id_ed25519_sk\n.  identity files may also be\n               specified on a per-host basis in the configuration file.\n               it is possible to have multiple\n-i\noptions (and multiple\n               identities specified in configuration files).  if no\n               certificates have been explicitly specified by the\ncertificatefile\ndirective,\nssh\nwill also try to load\n               certificate information from the filename obtained by\n               appending\n-cert.pub\nto identity filenames.\n-j\ndestination\nconnect to the target host by first making an\nssh\nconnection to the jump host described by\ndestination\nand\n               then establishing a tcp forwarding to the ultimate\n               destination from there.  multiple jump hops may be\n               specified separated by comma characters.  ipv6 addresses\n               can be specified by enclosing the address in square\n               brackets.  this is a shortcut to specify a\nproxyjump\nconfiguration directive.  note that configuration\n               directives supplied on the command-line generally apply to\n               the destination host and not any specified jump hosts.\n               use\n~/.ssh/config\nto specify configuration for jump hosts.\n-k\nenables gssapi-based authentication and forwarding\n               (delegation) of gssapi credentials to the server.\n-k\ndisables forwarding (delegation) of gssapi credentials to\n               the server.\n-l\n[\nbind_address\n:]\nport\n:\nhost\n:\nhostport\n-l\n[\nbind_address\n:]\nport\n:\nremote_socket\n-l\nlocal_socket\n:\nhost\n:\nhostport\n-l\nlocal_socket\n:\nremote_socket\nspecifies that connections to the given tcp port or unix\n               socket on the local (client) host are to be forwarded to\n               the given host and port, or unix socket, on the remote\n               side.  this works by allocating a socket to listen to\n               either a tcp\nport\non the local side, optionally bound to\n               the specified\nbind_address\n, or to a unix socket.  whenever\n               a connection is made to the local port or socket, the\n               connection is forwarded over the secure channel, and a\n               connection is made to either\nhost\nport\nhostport\n, or the\n               unix socket\nremote_socket\n, from the remote machine.\n\n               port forwardings can also be specified in the\n               configuration file.  only the superuser can forward\n               privileged ports.  ipv6 addresses can be specified by\n               enclosing the address in square brackets.\n\n               by default, the local port is bound in accordance with the\ngatewayports\nsetting.  however, an explicit\nbind_address\nmay be used to bind the connection to a specific address.\n               the\nbind_address\nof \u00e2\u0080\u009clocalhost\u00e2\u0080\u009d indicates that the\n               listening port be bound for local use only, while an empty\n               address or \u00e2\u0080\u0098*\u00e2\u0080\u0099 indicates that the port should be available\n               from all interfaces.\n-l\nlogin_name\nspecifies the user to log in as on the remote machine.\n               this also may be specified on a per-host basis in the\n               configuration file.\n-m\nplaces the\nssh\nclient into \u00e2\u0080\u009cmaster\u00e2\u0080\u009d mode for connection\n               sharing.  multiple\n-m\noptions places\nssh\ninto \u00e2\u0080\u009cmaster\u00e2\u0080\u009d\n               mode but with confirmation required using\nssh-askpass\n(1)\n               before each operation that changes the multiplexing state\n               (e.g. opening a new session).  refer to the description of\ncontrolmaster\nin\nssh_config\n(5) for details.\n-m\nmac_spec\na comma-separated list of mac (message authentication\n               code) algorithms, specified in order of preference.  see\n               the\nmacs\nkeyword in\nssh_config\n(5) for more information.\n-n\ndo not execute a remote command.  this is useful for just\n               forwarding ports.  refer to the description of\nsessiontype\nin\nssh_config\n(5) for details.\n-n\nredirects stdin from\n/dev/null\n(actually, prevents reading\n               from stdin).  this must be used when\nssh\nis run in the\n               background.  a common trick is to use this to run x11\n               programs on a remote machine.  for example,\nssh -n\nshadows.cs.hut.fi emacs &\nwill start an emacs on\n               shadows.cs.hut.fi, and the x11 connection will be\n               automatically forwarded over an encrypted channel.  the\nssh\nprogram will be put in the background.  (this does not\n               work if\nssh\nneeds to ask for a password or passphrase; see\n               also the\n-f\noption.)  refer to the description of\nstdinnull\nin\nssh_config\n(5) for details.\n-o\nctl_cmd\ncontrol an active connection multiplexing master process.\n               when the\n-o\noption is specified, the\nctl_cmd\nargument is\n               interpreted and passed to the master process.  valid\n               commands are: \u00e2\u0080\u009ccheck\u00e2\u0080\u009d (check that the master process is\n               running), \u00e2\u0080\u009cforward\u00e2\u0080\u009d (request forwardings without command\n               execution), \u00e2\u0080\u009ccancel\u00e2\u0080\u009d (cancel forwardings), \u00e2\u0080\u009cproxy\u00e2\u0080\u009d\n               (connect to a running multiplexing master in proxy mode),\n               \u00e2\u0080\u009cexit\u00e2\u0080\u009d (request the master to exit), and \u00e2\u0080\u009cstop\u00e2\u0080\u009d (request\n               the master to stop accepting further multiplexing\n               requests).\n-o\noption\ncan be used to give options in the format used in the\n               configuration file.  this is useful for specifying options\n               for which there is no separate command-line flag.  for\n               full details of the options listed below, and their\n               possible values, see\nssh_config\n(5).\n\n                     addkeystoagent\n                     addressfamily\n                     batchmode\n                     bindaddress\n                     canonicaldomains\n                     canonicalizefallbacklocal\n                     canonicalizehostname\n                     canonicalizemaxdots\n                     canonicalizepermittedcnames\n                     casignaturealgorithms\n                     certificatefile\n                     checkhostip\n                     ciphers\n                     clearallforwardings\n                     compression\n                     connectionattempts\n                     connecttimeout\n                     controlmaster\n                     controlpath\n                     controlpersist\n                     dynamicforward\n                     enableescapecommandline\n                     escapechar\n                     exitonforwardfailure\n                     fingerprinthash\n                     forkafterauthentication\n                     forwardagent\n                     forwardx11\n                     forwardx11timeout\n                     forwardx11trusted\n                     gatewayports\n                     globalknownhostsfile\n                     gssapiauthentication\n                     gssapidelegatecredentials\n                     hashknownhosts\n                     host\n                     hostbasedacceptedalgorithms\n                     hostbasedauthentication\n                     hostkeyalgorithms\n                     hostkeyalias\n                     hostname\n                     identitiesonly\n                     identityagent\n                     identityfile\n                     ipqos\n                     kbdinteractiveauthentication\n                     kbdinteractivedevices\n                     kexalgorithms\n                     knownhostscommand\n                     localcommand\n                     localforward\n                     loglevel\n                     macs\n                     match\n                     nohostauthenticationforlocalhost\n                     numberofpasswordprompts\n                     passwordauthentication\n                     permitlocalcommand\n                     permitremoteopen\n                     pkcs11provider\n                     port\n                     preferredauthentications\n                     proxycommand\n                     proxyjump\n                     proxyusefdpass\n                     pubkeyacceptedalgorithms\n                     pubkeyauthentication\n                     rekeylimit\n                     remotecommand\n                     remoteforward\n                     requesttty\n                     requiredrsasize\n                     sendenv\n                     serveraliveinterval\n                     serveralivecountmax\n                     sessiontype\n                     setenv\n                     stdinnull\n                     streamlocalbindmask\n                     streamlocalbindunlink\n                     stricthostkeychecking\n                     tcpkeepalive\n                     tunnel\n                     tunneldevice\n                     updatehostkeys\n                     user\n                     userknownhostsfile\n                     verifyhostkeydns\n                     visualhostkey\n                     xauthlocation\n-p\ntag\nspecify a tag name that may be used to select\n               configuration in\nssh_config\n(5).  refer to the\ntag\nand\nmatch\nkeywords in\nssh_config\n(5) for more information.\n-p\nport\nport to connect to on the remote host.  this can be\n               specified on a per-host basis in the configuration file.\n-q\nquery_option\nqueries for the algorithms supported by one of the\n               following features:\ncipher\n(supported symmetric ciphers),\ncipher-auth\n(supported symmetric ciphers that support\n               authenticated encryption),\nhelp\n(supported query terms for\n               use with the\n-q\nflag),\nmac\n(supported message integrity\n               codes),\nkex\n(key exchange algorithms),\nkey\n(key types),\nkey-ca-sign\n(valid ca signature algorithms for\n               certificates),\nkey-cert\n(certificate key types),\nkey-plain\n(non-certificate key types),\nkey-sig\n(all key types and\n               signature algorithms),\nprotocol-version\n(supported ssh\n               protocol versions), and\nsig\n(supported signature\n               algorithms).  alternatively, any keyword from\nssh_config\n(5) or\nsshd_config\n(5) that takes an algorithm\n               list may be used as an alias for the corresponding\n               query_option.\n-q\nquiet mode.  causes most warning and diagnostic messages\n               to be suppressed.\n-r\n[\nbind_address\n:]\nport\n:\nhost\n:\nhostport\n-r\n[\nbind_address\n:]\nport\n:\nlocal_socket\n-r\nremote_socket\n:\nhost\n:\nhostport\n-r\nremote_socket\n:\nlocal_socket\n-r\n[\nbind_address\n:]\nport\nspecifies that connections to the given tcp port or unix\n               socket on the remote (server) host are to be forwarded to\n               the local side.\n\n               this works by allocating a socket to listen to either a\n               tcp\nport\nor to a unix socket on the remote side.  whenever\n               a connection is made to this port or unix socket, the\n               connection is forwarded over the secure channel, and a\n               connection is made from the local machine to either an\n               explicit destination specified by\nhost\nport\nhostport\n, or\nlocal_socket\n, or, if no explicit destination was\n               specified,\nssh\nwill act as a socks 4/5 proxy and forward\n               connections to the destinations requested by the remote\n               socks client.\n\n               port forwardings can also be specified in the\n               configuration file.  privileged ports can be forwarded\n               only when logging in as root on the remote machine.  ipv6\n               addresses can be specified by enclosing the address in\n               square brackets.\n\n               by default, tcp listening sockets on the server will be\n               bound to the loopback interface only.  this may be\n               overridden by specifying a\nbind_address\n.  an empty\nbind_address\n, or the address \u00e2\u0080\u0098*\u00e2\u0080\u0099, indicates that the\n               remote socket should listen on all interfaces.  specifying\n               a remote\nbind_address\nwill only succeed if the server's\ngatewayports\noption is enabled (see\nsshd_config\n(5)).\n\n               if the\nport\nargument is \u00e2\u0080\u00980\u00e2\u0080\u0099, the listen port will be\n               dynamically allocated on the server and reported to the\n               client at run time.  when used together with\n-o forward\n,\n               the allocated port will be printed to the standard output.\n-s\nctl_path\nspecifies the location of a control socket for connection\n               sharing, or the string \u00e2\u0080\u009cnone\u00e2\u0080\u009d to disable connection\n               sharing.  refer to the description of\ncontrolpath\nand\ncontrolmaster\nin\nssh_config\n(5) for details.\n-s\nmay be used to request invocation of a subsystem on the\n               remote system.  subsystems facilitate the use of ssh as a\n               secure transport for other applications (e.g.\nsftp\n(1)).\n               the subsystem is specified as the remote command.  refer\n               to the description of\nsessiontype\nin\nssh_config\n(5) for\n               details.\n-t\ndisable pseudo-terminal allocation.\n-t\nforce pseudo-terminal allocation.  this can be used to\n               execute arbitrary screen-based programs on a remote\n               machine, which can be very useful, e.g. when implementing\n               menu services.  multiple\n-t\noptions force tty allocation,\n               even if\nssh\nhas no local tty.\n-v\ndisplay the version number and exit.\n-v\nverbose mode.  causes\nssh\nto print debugging messages\n               about its progress.  this is helpful in debugging\n               connection, authentication, and configuration problems.\n               multiple\n-v\noptions increase the verbosity.  the maximum\n               is 3.\n-w\nhost\n:\nport\nrequests that standard input and output on the client be\n               forwarded to\nhost\non\nport\nover the secure channel.\n               implies\n-n\n,\n-t\n,\nexitonforwardfailure\nand\nclearallforwardings\n, though these can be overridden in the\n               configuration file or using\n-o\ncommand line options.\n-w\nlocal_tun\n[:\nremote_tun\n]\n               requests tunnel device forwarding with the specified\ntun\n(4) devices between the client (\nlocal_tun\n) and the\n               server (\nremote_tun\n).\n\n               the devices may be specified by numerical id or the\n               keyword \u00e2\u0080\u009cany\u00e2\u0080\u009d, which uses the next available tunnel\n               device.  if\nremote_tun\nis not specified, it defaults to\n               \u00e2\u0080\u009cany\u00e2\u0080\u009d.  see also the\ntunnel\nand\ntunneldevice\ndirectives in\nssh_config\n(5).\n\n               if the\ntunnel\ndirective is unset, it will be set to the\n               default tunnel mode, which is \u00e2\u0080\u009cpoint-to-point\u00e2\u0080\u009d.  if a\n               different\ntunnel\nforwarding mode it desired, then it\n               should be specified before\n-w\n.\n-x\nenables x11 forwarding.  this can also be specified on a\n               per-host basis in a configuration file.\n\n               x11 forwarding should be enabled with caution.  users with\n               the ability to bypass file permissions on the remote host\n               (for the user's x authorization database) can access the\n               local x11 display through the forwarded connection.  an\n               attacker may then be able to perform activities such as\n               keystroke monitoring.\n\n               for this reason, x11 forwarding is subjected to x11\n               security extension restrictions by default.  refer to the\nssh -y\noption and the\nforwardx11trusted\ndirective in\nssh_config\n(5) for more information.\n-x\ndisables x11 forwarding.\n-y\nenables trusted x11 forwarding.  trusted x11 forwardings\n               are not subjected to the x11 security extension controls.\n-y\nsend log information using the\nsyslog\n(3) system module.\n               by default this information is sent to stderr.\nssh\nmay additionally obtain configuration data from a per-user\n       configuration file and a system-wide configuration file.  the file\n       format and configuration options are described in\nssh_config\n(5).\nRelevant sections:\n- \n- \n- \n- \n- \n- \n- \n\n---\n\nCommand: ssh-keygen\nDescription: ssh-keygen\ngenerates, manages and converts authentication keys for\nssh\n(1).\nssh-keygen\ncan create keys for use by ssh protocol\n       version 2.\n\n       the type of key to be generated is specified with the\n-t\noption.\n       if invoked without any arguments,\nssh-keygen\nwill generate an\n       ed25519 key.\nssh-keygen\nis also used to generate groups for use in diffie-\n       hellman group exchange (dh-gex).  see the \u00e2\u0080\u009cmoduli generation\u00e2\u0080\u009d\n       section for details.\n\n       finally,\nssh-keygen\ncan be used to generate and update key\n       revocation lists, and to test whether given keys have been revoked\n       by one.  see the \u00e2\u0080\u009ckey revocation lists\u00e2\u0080\u009d section for details.\n\n       normally each user wishing to use ssh with public key\n       authentication runs this once to create the authentication key in\n~/.ssh/id_ecdsa\n,\n~/.ssh/id_ecdsa_sk\n,\n~/.ssh/id_ed25519\n,\n~/.ssh/id_ed25519_sk\nor\n~/.ssh/id_rsa\n.  additionally, the system\n       administrator may use this to generate host keys, as seen in\n/etc/rc\n.\n\n       normally this program generates the key and asks for a file in\n       which to store the private key.  the public key is stored in a\n       file with the same name but \u00e2\u0080\u009c.pub\u00e2\u0080\u009d appended.  the program also\n       asks for a passphrase.  the passphrase may be empty to indicate no\n       passphrase (host keys must have an empty passphrase), or it may be\n       a string of arbitrary length.  a passphrase is similar to a\n       password, except it can be a phrase with a series of words,\n       punctuation, numbers, whitespace, or any string of characters you\n       want.  good passphrases are 10-30 characters long, are not simple\n       sentences or otherwise easily guessable (english prose has only\n       1-2 bits of entropy per character, and provides very bad\n       passphrases), and contain a mix of upper and lowercase letters,\n       numbers, and non-alphanumeric characters.  the passphrase can be\n       changed later by using the\n-p\noption.\n\n       there is no way to recover a lost passphrase.  if the passphrase\n       is lost or forgotten, a new key must be generated and the\n       corresponding public key copied to other machines.\nssh-keygen\nwill by default write keys in an openssh-specific\n       format.  this format is preferred as it offers better protection\n       for keys at rest as well as allowing storage of key comments\n       within the private key file itself.  the key comment may be useful\n       to help identify the key.  the comment is initialized to\n       \u00e2\u0080\u009cuser@host\u00e2\u0080\u009d when the key is created, but can be changed using the\n-c\noption.\n\n       it is still possible for\nssh-keygen\nto write the previously-used\n       pem format private keys using the\n-m\nflag.  this may be used when\n       generating new keys, and existing new-format keys may be converted\n       using this option in conjunction with the\n-p\n(change passphrase)\n       flag.\n\n       after a key is generated,\nssh-keygen\nwill ask where the keys\n       should be placed to be activated.\n\n       the options are as follows:\n-a\ngenerate host keys of all default key types (rsa, ecdsa,\n               and ed25519) if they do not already exist.  the host keys\n               are generated with the default key file path, an empty\n               passphrase, default bits for the key type, and default\n               comment.  if\n-f\nhas also been specified, its argument is\n               used as a prefix to the default path for the resulting\n               host key files.  this is used by\n/etc/rc\nto generate new\n               host keys.\n-a\nrounds\nwhen saving a private key, this option specifies the\n               number of kdf (key derivation function, currently\nbcrypt_pbkdf\n(3)) rounds used.  higher numbers result in\n               slower passphrase verification and increased resistance to\n               brute-force password cracking (should the keys be stolen).\n               the default is 16 rounds.\n-b\nshow the bubblebabble digest of specified private or\n               public key file.\n-b\nbits\nspecifies the number of bits in the key to create.  for\n               rsa keys, the minimum size is 1024 bits and the default is\n               3072 bits.  generally, 3072 bits is considered sufficient.\n               for ecdsa keys, the\n-b\nflag determines the key length by\n               selecting from one of three elliptic curve sizes: 256, 384\n               or 521 bits.  attempting to use bit lengths other than\n               these three values for ecdsa keys will fail.  ecdsa-sk,\n               ed25519 and ed25519-sk keys have a fixed length and the\n-b\nflag will be ignored.\n-c\ncomment\nprovides a new comment.\n-c\nrequests changing the comment in the private and public\n               key files.  the program will prompt for the file\n               containing the private keys, for the passphrase if the key\n               has one, and for the new comment.\n-d\npkcs11\ndownload the public keys provided by the pkcs#11 shared\n               library\npkcs11\n.  when used in combination with\n-s\n, this\n               option indicates that a ca key resides in a pkcs#11 token\n               (see the \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section for details).\n-e\nfingerprint_hash\nspecifies the hash algorithm used when displaying key\n               fingerprints.  valid options are: \u00e2\u0080\u009cmd5\u00e2\u0080\u009d and \u00e2\u0080\u009csha256\u00e2\u0080\u009d.  the\n               default is \u00e2\u0080\u009csha256\u00e2\u0080\u009d.\n-e\nthis option will read a private or public openssh key file\n               and print to stdout a public key in one of the formats\n               specified by the\n-m\noption.  the default export format is\n               \u00e2\u0080\u009crfc4716\u00e2\u0080\u009d.  this option allows exporting openssh keys for\n               use by other programs, including several commercial ssh\n               implementations.\n-f\nhostname\n|\n[hostname]:port\nsearch for the specified\nhostname\n(with optional port\n               number) in a\nknown_hosts\nfile, listing any occurrences\n               found.  this option is useful to find hashed host names or\n               addresses and may also be used in conjunction with the\n-h\noption to print found keys in a hashed format.\n-f\nfilename\nspecifies the filename of the key file.\n-g\nuse generic dns format when printing fingerprint resource\n               records using the\n-r\ncommand.\n-h\nhash a\nknown_hosts\nfile.  this replaces all hostnames and\n               addresses with hashed representations within the specified\n               file; the original content is moved to a file with a .old\n               suffix.  these hashes may be used normally by\nssh\nand\nsshd\n, but they do not reveal identifying information\n               should the file's contents be disclosed.  this option will\n               not modify existing hashed hostnames and is therefore safe\n               to use on files that mix hashed and non-hashed names.\n-h\nwhen signing a key, create a host certificate instead of a\n               user certificate.  see the \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section for\n               details.\n-i\ncertificate_identity\nspecify the key identity when signing a public key.  see\n               the \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section for details.\n-i\nthis option will read an unencrypted private (or public)\n               key file in the format specified by the\n-m\noption and\n               print an openssh compatible private (or public) key to\n               stdout.  this option allows importing keys from other\n               software, including several commercial ssh\n               implementations.  the default import format is \u00e2\u0080\u009crfc4716\u00e2\u0080\u009d.\n-k\ndownload resident keys from a fido authenticator.  public\n               and private key files will be written to the current\n               directory for each downloaded key.  if multiple fido\n               authenticators are attached, keys will be downloaded from\n               the first touched authenticator.  see the \u00e2\u0080\u009cfido\n               authenticator\u00e2\u0080\u009d section for more information.\n-k\ngenerate a krl file.  in this mode,\nssh-keygen\nwill\n               generate a krl file at the location specified via the\n-f\nflag that revokes every key or certificate presented on\n               the command line.  keys/certificates to be revoked may be\n               specified by public key file or using the format described\n               in the \u00e2\u0080\u009ckey revocation lists\u00e2\u0080\u009d section.\n-l\nprints the contents of one or more certificates.\n-l\nshow fingerprint of specified public key file.\nssh-keygen\nwill try to find the matching public key file and prints\n               its fingerprint.  if combined with\n-v\n, a visual ascii art\n               representation of the key is supplied with the\n               fingerprint.\n-m generate\ngenerate candidate diffie-hellman group exchange (dh-gex)\n               parameters for eventual use by the\n               \u00e2\u0080\u0098diffie-hellman-group-exchange-*\u00e2\u0080\u0099 key exchange methods.\n               the numbers generated by this operation must be further\n               screened before use.  see the \u00e2\u0080\u009cmoduli generation\u00e2\u0080\u009d section\n               for more information.\n-m screen\nscreen candidate parameters for diffie-hellman group\n               exchange.  this will accept a list of candidate numbers\n               and test that they are safe (sophie germain) primes with\n               acceptable group generators.  the results of this\n               operation may be added to the\n/etc/moduli\nfile.  see the\n               \u00e2\u0080\u009cmoduli generation\u00e2\u0080\u009d section for more information.\n-m\nkey_format\nspecify a key format for key generation, the\n-i\n(import),\n-e\n(export) conversion options, and the\n-p\nchange\n               passphrase operation.  the latter may be used to convert\n               between openssh private key and pem private key formats.\n               the supported key formats are: \u00e2\u0080\u009crfc4716\u00e2\u0080\u009d (rfc 4716/ssh2\n               public or private key), \u00e2\u0080\u009cpkcs8\u00e2\u0080\u009d (pkcs8 public or private\n               key) or \u00e2\u0080\u009cpem\u00e2\u0080\u009d (pem public key).  by default openssh will\n               write newly-generated private keys in its own format, but\n               when converting public keys for export the default format\n               is \u00e2\u0080\u009crfc4716\u00e2\u0080\u009d.  setting a format of \u00e2\u0080\u009cpem\u00e2\u0080\u009d when generating\n               or updating a supported private key type will cause the\n               key to be stored in the legacy pem private key format.\n-n\nnew_passphrase\nprovides the new passphrase.\n-n\nprincipals\nspecify one or more principals (user or host names) to be\n               included in a certificate when signing a key.  multiple\n               principals may be specified, separated by commas.  see the\n               \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section for details.\n-o\noption\nspecify a key/value option.  these are specific to the\n               operation that\nssh-keygen\nhas been requested to perform.\n\n               when signing certificates, one of the options listed in\n               the \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section may be specified here.\n\n               when performing moduli generation or screening, one of the\n               options listed in the \u00e2\u0080\u009cmoduli generation\u00e2\u0080\u009d section may be\n               specified.\n\n               when generating fido authenticator-backed keys, the\n               options listed in the \u00e2\u0080\u009cfido authenticator\u00e2\u0080\u009d section may be\n               specified.\n\n               when performing signature-related options using the\n-y\nflag, the following options are accepted:\nhashalg\n=\nalgorithm\nselects the hash algorithm to use for hashing the\n                       message to be signed.  valid algorithms are\n                       \u00e2\u0080\u009csha256\u00e2\u0080\u009d and \u00e2\u0080\u009csha512.\u00e2\u0080\u009d the default is \u00e2\u0080\u009csha512.\u00e2\u0080\u009d\nprint-pubkey\nprint the full public key to standard output after\n                       signature verification.\nverify-time\n=\ntimestamp\nspecifies a time to use when validating signatures\n                       instead of the current time.  the time may be\n                       specified as a date or time in the yyyymmdd[z] or\n                       in yyyymmddhhmm[ss][z] formats.  dates and times\n                       will be interpreted in the current system time\n                       zone unless suffixed with a z character, which\n                       causes them to be interpreted in the utc time\n                       zone.\n\n               when generating sshfp dns records from public keys using\n               the\n-r\nflag, the following options are accepted:\nhashalg\n=\nalgorithm\nselects a hash algorithm to use when printing\n                       sshfp records using the\n-d\nflag.  valid algorithms\n                       are \u00e2\u0080\u009csha1\u00e2\u0080\u009d and \u00e2\u0080\u009csha256\u00e2\u0080\u009d.  the default is to print\n                       both.\n\n               the\n-o\noption may be specified multiple times.\n-p\npassphrase\nprovides the (old) passphrase.\n-p\nrequests changing the passphrase of a private key file\n               instead of creating a new private key.  the program will\n               prompt for the file containing the private key, for the\n               old passphrase, and twice for the new passphrase.\n-q\ntest whether keys have been revoked in a krl.  if the\n-l\noption is also specified then the contents of the krl will\n               be printed.\n-q\nsilence\nssh-keygen\n.\n-r\nhostname\n|\n[hostname]:port\nremoves all keys belonging to the specified\nhostname\n(with\n               optional port number) from a\nknown_hosts\nfile.  this\n               option is useful to delete hashed hosts (see the\n-h\noption\n               above).\n-r\nhostname\nprint the sshfp fingerprint resource record named\nhostname\nfor the specified public key file.\n-s\nca_key\ncertify (sign) a public key using the specified ca key.\n               see the \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section for details.\n\n               when generating a krl,\n-s\nspecifies a path to a ca public\n               key file used to revoke certificates directly by key id or\n               serial number.  see the \u00e2\u0080\u009ckey revocation lists\u00e2\u0080\u009d section for\n               details.\n-t ecdsa\n|\necdsa-sk\n|\ned25519\n|\ned25519-sk\n|\nrsa\nspecifies the type of key to create.  the possible values\n               are \u00e2\u0080\u009cecdsa\u00e2\u0080\u009d, \u00e2\u0080\u009cecdsa-sk\u00e2\u0080\u009d, \u00e2\u0080\u009ced25519 (the default),\u00e2\u0080\u009d\n               \u00e2\u0080\u009ced25519-sk\u00e2\u0080\u009d, or \u00e2\u0080\u009crsa\u00e2\u0080\u009d.\n\n               this flag may also be used to specify the desired\n               signature type when signing certificates using an rsa ca\n               key.  the available rsa signature variants are \u00e2\u0080\u009cssh-rsa\u00e2\u0080\u009d\n               (sha1 signatures, not recommended), \u00e2\u0080\u009crsa-sha2-256\u00e2\u0080\u009d, and\n               \u00e2\u0080\u009crsa-sha2-512\u00e2\u0080\u009d (the default for rsa keys).\n-u\nwhen used in combination with\n-s\nor\n-y sign\n, this option\n               indicates that a ca key resides in a\nssh-agent\n(1).  see\n               the \u00e2\u0080\u009ccertificates\u00e2\u0080\u009d section for more information.\n-u\nupdate a krl.  when specified with\n-k\n, keys listed via the\n               command line are added to the existing krl rather than a\n               new krl being created.\n-v\nvalidity_interval\nspecify a validity interval when signing a certificate.  a\n               validity interval may consist of a single time, indicating\n               that the certificate is valid beginning now and expiring\n               at that time, or may consist of two times separated by a\n               colon to indicate an explicit time interval.\n\n               the start time may be specified as:\n\u00e2\u0080\u00a2\nthe string \u00e2\u0080\u009calways\u00e2\u0080\u009d to indicate the certificate has no\n                   specified start time.\n\u00e2\u0080\u00a2\na date or time in the system time zone formatted as\n                   yyyymmdd or yyyymmddhhmm[ss].\n\u00e2\u0080\u00a2\na date or time in the utc time zone as yyyymmddz or\n                   yyyymmddhhmm[ss]z.\n\u00e2\u0080\u00a2\na relative time before the current system time\n                   consisting of a minus sign followed by an interval in\n                   the format described in the time formats section of\nsshd_config\n(5).\n\u00e2\u0080\u00a2\na raw seconds since epoch (jan 1 1970 00:00:00 utc) as\n                   a hexadecimal number beginning with \u00e2\u0080\u009c0x\u00e2\u0080\u009d.\n\n               the end time may be specified similarly to the start time:\n\u00e2\u0080\u00a2\nthe string \u00e2\u0080\u009cforever\u00e2\u0080\u009d to indicate the certificate has\n                   no specified end time.\n\u00e2\u0080\u00a2\na date or time in the system time zone formatted as\n                   yyyymmdd or yyyymmddhhmm[ss].\n\u00e2\u0080\u00a2\na date or time in the utc time zone as yyyymmddz or\n                   yyyymmddhhmm[ss]z.\n\u00e2\u0080\u00a2\na relative time after the current system time\n                   consisting of a plus sign followed by an interval in\n                   the format described in the time formats section of\nsshd_config\n(5).\n\u00e2\u0080\u00a2\na raw seconds since epoch (jan 1 1970 00:00:00 utc) as\n                   a hexadecimal number beginning with \u00e2\u0080\u009c0x\u00e2\u0080\u009d.\n\n               for example:\n\n               +52w1d  valid from now to 52 weeks and one day from now.\n\n               -4w:+4w\n                       valid from four weeks ago to four weeks from now.\n\n               20100101123000:20110101123000\n                       valid from 12:30 pm, january 1st, 2010 to 12:30\n                       pm, january 1st, 2011.\n\n               20100101123000z:20110101123000z\n                       similar, but interpreted in the utc time zone\n                       rather than the system time zone.\n\n               -1d:20110101\n                       valid from yesterday to midnight, january 1st,\n                       2011.\n\n               0x1:0x2000000000\n                       valid from roughly early 1970 to may 2033.\n\n               -1m:forever\n                       valid from one minute ago and never expiring.\n-v\nverbose mode.  causes\nssh-keygen\nto print debugging\n               messages about its progress.  this is helpful for\n               debugging moduli generation.  multiple\n-v\noptions increase\n               the verbosity.  the maximum is 3.\n-w\nprovider\nspecifies a path to a library that will be used when\n               creating fido authenticator-hosted keys, overriding the\n               default of using the internal usb hid support.\n-y find-principals\nfind the principal(s) associated with the public key of a\n               signature, provided using the\n-s\nflag in an authorized\n               signers file provided using the\n-f\nflag.  the format of\n               the allowed signers file is documented in the \u00e2\u0080\u009callowed\n               signers\u00e2\u0080\u009d section below.  if one or more matching\n               principals are found, they are returned on standard\n               output.\n-y match-principals\nfind principal matching the principal name provided using\n               the\n-i\nflag in the authorized signers file specified using\n               the\n-f\nflag.  if one or more matching principals are\n               found, they are returned on standard output.\n-y check-novalidate\nchecks that a signature generated using\nssh-keygen -y sign\nhas a valid structure.  this does not validate if a\n               signature comes from an authorized signer.  when testing a\n               signature,\nssh-keygen\naccepts a message on standard input\n               and a signature namespace using\n-n\n.  a file containing the\n               corresponding signature must also be supplied using the\n-s\nflag.  successful testing of the signature is signalled by\nssh-keygen\nreturning a zero exit status.\n-y sign\ncryptographically sign a file or some data using an ssh\n               key.  when signing,\nssh-keygen\naccepts zero or more files\n               to sign on the command-line - if no files are specified\n               then\nssh-keygen\nwill sign data presented on standard\n               input.  signatures are written to the path of the input\n               file with \u00e2\u0080\u009c.sig\u00e2\u0080\u009d appended, or to standard output if the\n               message to be signed was read from standard input.\n\n               the key used for signing is specified using the\n-f\noption\n               and may refer to either a private key, or a public key\n               with the private half available via\nssh-agent\n(1).  an\n               additional signature namespace, used to prevent signature\n               confusion across different domains of use (e.g. file\n               signing vs email signing) must be provided via the\n-n\nflag.  namespaces are arbitrary strings, and may include:\n               \u00e2\u0080\u009cfile\u00e2\u0080\u009d for file signing, \u00e2\u0080\u009cemail\u00e2\u0080\u009d for email signing.  for\n               custom uses, it is recommended to use names following a\n               namespace@your.domain pattern to generate unambiguous\n               namespaces.\n-y verify\nrequest to verify a signature generated using\nssh-keygen\n-y sign\nas described above.  when verifying a signature,\nssh-keygen\naccepts a message on standard input and a\n               signature namespace using\n-n\n.  a file containing the\n               corresponding signature must also be supplied using the\n-s\nflag, along with the identity of the signer using\n-i\nand a\n               list of allowed signers via the\n-f\nflag.  the format of\n               the allowed signers file is documented in the \u00e2\u0080\u009callowed\n               signers\u00e2\u0080\u009d section below.  a file containing revoked keys\n               can be passed using the\n-r\nflag.  the revocation file may\n               be a krl or a one-per-line list of public keys.\n               successful verification by an authorized signer is\n               signalled by\nssh-keygen\nreturning a zero exit status.\n-y\nthis option will read a private openssh format file and\n               print an openssh public key to stdout.\n-z\ncipher\nspecifies the cipher to use for encryption when writing an\n               openssh-format private key file.  the list of available\n               ciphers may be obtained using \"ssh -q cipher\".  the\n               default is \u00e2\u0080\u009caes256-ctr\u00e2\u0080\u009d.\n-z\nserial_number\nspecifies a serial number to be embedded in the\n               certificate to distinguish this certificate from others\n               from the same ca.  if the\nserial_number\nis prefixed with a\n               \u00e2\u0080\u0098+\u00e2\u0080\u0099 character, then the serial number will be incremented\n               for each certificate signed on a single command-line.  the\n               default serial number is zero.\n\n               when generating a krl, the\n-z\nflag is used to specify a\n               krl version number.\nRelevant sections:\n- \n- \n\n---\n\nCommand: sftp\nDescription: sftp\nis a file transfer program, similar to\nftp\n(1), which performs\n       all operations over an encrypted\nssh\n(1) transport.  it may also\n       use many features of ssh, such as public key authentication and\n       compression.\n\n       the\ndestination\nmay be specified either as [user@]host[:path] or\n       as a uri in the form sftp://[user@]host[:port][/path].\n\n       if the\ndestination\nincludes a\npath\nand it is not a directory,\nsftp\nwill retrieve files automatically if a non-interactive\n       authentication method is used; otherwise it will do so after\n       successful interactive authentication.\n\n       if no\npath\nis specified, or if the\npath\nis a directory,\nsftp\nwill\n       log in to the specified\nhost\nand enter interactive command mode,\n       changing to the remote directory if one was specified.  an\n       optional trailing slash can be used to force the\npath\nto be\n       interpreted as a directory.\n\n       since the destination formats use colon characters to delimit host\n       names from path names or port numbers, ipv6 addresses must be\n       enclosed in square brackets to avoid ambiguity.\n\n       the options are as follows:\n-4\nforces\nsftp\nto use ipv4 addresses only.\n-6\nforces\nsftp\nto use ipv6 addresses only.\n-a\nallows forwarding of\nssh-agent\n(1) to the remote system.\n               the default is not to forward an authentication agent.\n-a\nattempt to continue interrupted transfers rather than\n               overwriting existing partial or complete copies of files.\n               if the partial contents differ from those being\n               transferred, then the resultant file is likely to be\n               corrupt.\n-b\nbuffer_size\nspecify the size of the buffer that\nsftp\nuses when\n               transferring files.  larger buffers require fewer round\n               trips at the cost of higher memory consumption.  the\n               default is 32768 bytes.\n-b\nbatchfile\nbatch mode reads a series of commands from an input\nbatchfile\ninstead of\nstdin\n.  since it lacks user\n               interaction, it should be used in conjunction with non-\n               interactive authentication to obviate the need to enter a\n               password at connection time (see\nsshd\n(8) and\nssh-keygen\n(1)\n               for details).\n\n               a\nbatchfile\nof \u00e2\u0080\u0098-\u00e2\u0080\u0099 may be used to indicate standard input.\nsftp\nwill abort if any of the following commands fail:\nget\n,\nput\n,\nreget\n,\nreput\n,\nrename\n,\nln\n,\nrm\n,\nmkdir\n,\nchdir\n,\nls\n,\nlchdir\n,\ncopy\n,\ncp\n,\nchmod\n,\nchown\n,\nchgrp\n,\nlpwd\n,\ndf\n,\nsymlink\n,\n               and\nlmkdir\n.\n\n               termination on error can be suppressed on a command by\n               command basis by prefixing the command with a \u00e2\u0080\u0098-\u00e2\u0080\u0099\n               character (for example,\n-rm /tmp/blah*\n).  echo of the\n               command may be suppressed by prefixing the command with a\n               \u00e2\u0080\u0098@\u00e2\u0080\u0099 character.  these two prefixes may be combined in any\n               order, for example\n-@ls /bsd\n.\n-c\nenables compression (via ssh's\n-c\nflag).\n-c\ncipher\nselects the cipher to use for encrypting the data\n               transfers.  this option is directly passed to\nssh\n(1).\n-d\nsftp_server_command\nconnect directly to a local sftp server (rather than via\nssh\n(1)).  a command and arguments may be specified, for\n               example \"/path/sftp-server -el debug3\".  this option may\n               be useful in debugging the client and server.\n-f\nssh_config\nspecifies an alternative per-user configuration file for\nssh\n(1).  this option is directly passed to\nssh\n(1).\n-f\nrequests that files be flushed to disk immediately after\n               transfer.  when uploading files, this feature is only\n               enabled if the server implements the \"fsync@openssh.com\"\n               extension.\n-i\nidentity_file\nselects the file from which the identity (private key) for\n               public key authentication is read.  this option is\n               directly passed to\nssh\n(1).\n-j\ndestination\nconnect to the target host by first making an\nsftp\nconnection to the jump host described by\ndestination\nand\n               then establishing a tcp forwarding to the ultimate\n               destination from there.  multiple jump hops may be\n               specified separated by comma characters.  this is a\n               shortcut to specify a\nproxyjump\nconfiguration directive.\n               this option is directly passed to\nssh\n(1).\n-l\nlimit\nlimits the used bandwidth, specified in kbit/s.\n-n\ndisables quiet mode, e.g. to override the implicit quiet\n               mode set by the\n-b\nflag.\n-o\nssh_option\ncan be used to pass options to\nssh\nin the format used in\nssh_config\n(5).  this is useful for specifying options for\n               which there is no separate\nsftp\ncommand-line flag.  for\n               example, to specify an alternate port use:\nsftp -oport=24\n.\n               for full details of the options listed below, and their\n               possible values, see\nssh_config\n(5).\n\n                     addressfamily\n                     batchmode\n                     bindaddress\n                     bindinterface\n                     canonicaldomains\n                     canonicalizefallbacklocal\n                     canonicalizehostname\n                     canonicalizemaxdots\n                     canonicalizepermittedcnames\n                     casignaturealgorithms\n                     certificatefile\n                     checkhostip\n                     ciphers\n                     compression\n                     connectionattempts\n                     connecttimeout\n                     controlmaster\n                     controlpath\n                     controlpersist\n                     globalknownhostsfile\n                     gssapiauthentication\n                     gssapidelegatecredentials\n                     hashknownhosts\n                     host\n                     hostbasedacceptedalgorithms\n                     hostbasedauthentication\n                     hostkeyalgorithms\n                     hostkeyalias\n                     hostname\n                     identitiesonly\n                     identityagent\n                     identityfile\n                     ipqos\n                     kbdinteractiveauthentication\n                     kbdinteractivedevices\n                     kexalgorithms\n                     knownhostscommand\n                     loglevel\n                     macs\n                     nohostauthenticationforlocalhost\n                     numberofpasswordprompts\n                     passwordauthentication\n                     pkcs11provider\n                     port\n                     preferredauthentications\n                     proxycommand\n                     proxyjump\n                     pubkeyacceptedalgorithms\n                     pubkeyauthentication\n                     rekeylimit\n                     requiredrsasize\n                     sendenv\n                     serveraliveinterval\n                     serveralivecountmax\n                     setenv\n                     stricthostkeychecking\n                     tcpkeepalive\n                     updatehostkeys\n                     user\n                     userknownhostsfile\n                     verifyhostkeydns\n-p\nport\nspecifies the port to connect to on the remote host.\n-p\npreserves modification times, access times, and modes from\n               the original files transferred.\n-q\nquiet mode: disables the progress meter as well as warning\n               and diagnostic messages from\nssh\n(1).\n-r\nnum_requests\nspecify how many requests may be outstanding at any one\n               time.  increasing this may slightly improve file transfer\n               speed but will increase memory usage.  the default is 64\n               outstanding requests.\n-r\nrecursively copy entire directories when uploading and\n               downloading.  note that\nsftp\ndoes not follow symbolic\n               links encountered in the tree traversal.\n-s\nprogram\nname of the\nprogram\nto use for the encrypted connection.\n               the program must understand\nssh\n(1) options.\n-s\nsubsystem\n|\nsftp_server\nspecifies the ssh2 subsystem or the path for an sftp\n               server on the remote host.  a path is useful when the\n               remote\nsshd\n(8) does not have an sftp subsystem configured.\n-v\nraise logging level.  this option is also passed to ssh.\n-x\nsftp_option\nspecify an option that controls aspects of sftp protocol\n               behaviour.  the valid options are:\nnrequests\n=\nvalue\ncontrols how many concurrent sftp read or write\n                       requests may be in progress at any point in time\n                       during a download or upload.  by default 64\n                       requests may be active concurrently.\nbuffer\n=\nvalue\ncontrols the maximum buffer size for a single sftp\n                       read/write operation used during download or\n                       upload.  by default a 32kb buffer is used.\nRelevant sections:\n- \n- \n\n---\n\n",
  "response": "### Command Overview\n\nThe `ssh` command is a secure shell client used for logging into remote machines and executing commands on them. It provides encrypted communication over an insecure network. It can also forward X11 connections, TCP ports, and Unix-domain sockets. Several commands, such as `ssh-agent`, `ssh-copy-id`, `ssh-keygen`, and `sftp`, are related to secure shell functionality.\n\n### Syntax\n```bash\nssh [options] [user@]hostname [command]\n```\n\n### Key Options\n- `-4`: Forces `ssh` to use IPv4 addresses only.\n- `-6`: Forces `ssh` to use IPv6 addresses only.\n- `-a`: Enables or disables forwarding of the authentication agent (e.g., `ssh-agent`). Use with caution, especially when enabling.\n- `-b bind_interface`: Binds to the address of `bind_interface` before connecting. Useful on multi-homed systems.\n- `-c cipher_spec`: Selects the cipher specification for encryption.\n- `-d [bind_address:]port`: Specifies local dynamic application-level port forwarding (SOCKS proxy).\n- `-e escape_char`: Sets the escape character (default: `~`) for sessions with a PTY.\n- `-f`: Requests `ssh` to go to the background just before command execution. Implies `-n`. Useful for password/passphrase prompts in the background.\n- `-g`: Allows remote hosts to connect to local forwarded ports.\n- `-i identity_file`: Selects a file from which the identity (private key) for public key authentication is read.\n- `-J destination`: Connects to the target host through a jump host.\n- `-l login_name`: Specifies the user to log in as on the remote machine.\n- `-n`: Redirects stdin from `/dev/null`. Prevents reading from stdin. Useful for background processes.\n- `-o option`: Used to specify options in the format used in the configuration file.\n- `-p port`: Specifies the port to connect to on the remote host.\n- `-q`: Quiet mode. Suppresses most warning and diagnostic messages.\n- `-r [bind_address:]port:host:hostport`: Specifies that connections to a TCP port on the remote host are to be forwarded to the local side.\n- `-s subsystem`: May be used to request invocation of a subsystem on the remote system.\n- `-t`: Forces pseudo-terminal allocation. Useful for executing screen-based programs on a remote machine.\n- `-v`: Verbose mode. Prints debugging messages about progress. Multiple `-v` options increase verbosity.\n- `-w local_tun[:remote_tun]`: Requests tunnel device forwarding.\n- `-x`: Enables or disables X11 forwarding. Use with caution when enabling.\n- `-y`: Enables trusted X11 forwarding.\n\n### Examples\n```bash\n# Example 1: Basic SSH login\nssh user@example.com\n\n# Example 2: SSH with a specific port\nssh -p 2222 user@example.com\n\n# Example 3: Execute a command on the remote host\nssh user@example.com \"ls -l /home/user\"\n\n# Example 4: SSH with identity file\nssh -i ~/.ssh/id_rsa user@example.com\n\n# Example 5: SSH with X11 forwarding enabled\nssh -X user@example.com\n\n# Example 6: SSH with dynamic port forwarding (SOCKS proxy)\nssh -D 8080 user@example.com\n\n# Example 7: SSH through a jump host\nssh -J jump_host user@target_host\n```\n\n### Notes\n- Agent forwarding (`-a`) should be enabled with caution.\n- X11 forwarding (`-X` or `-x`) should be enabled with caution.\n- It's generally better to use the `~/.ssh/config` file for frequently used options, especially per-host settings.\n- Always be mindful of security implications when using options like port forwarding.\n\n### Command Chains\n\nThe following command chains might be useful:\n\n```bash\nssh user@host \"command\" | rsync [rsync options]\n```\nThis will run \"command\" over ssh, and pipe the output to rsync\n\n```bash\nssh user@host \"cat file.txt\" | sftp user@host2\n```\nThis will run cat on \"file.txt\" over ssh, then pipes the output to sftp.\n\n```bash\nssh-agent | ssh-add\n```\nThis is probably incorrect usage of either command, please see the appropriate documentation for further explanation.",
  "analysis": {
    "query_analysis": {
      "intent": "The user wants to find the appropriate Linux command to establish an SSH (Secure Shell) connection.",
      "keywords": [
        "linux",
        "command",
        "ssh",
        "connect",
        "secure shell"
      ],
      "reformulated_query": "How to use the SSH command in Linux to connect to a remote server?",
      "original_query": "ssh",
      "optimized_query": "linux command for ssh",
      "optimization_metrics": {
        "precision": 1.0,
        "recall": 0,
        "f1_score": 0,
        "retrieval_time": 0.009721994400024414,
        "command_count": 3,
        "diverse_categories": 1,
        "query_specificity": 0.5,
        "overall_score": 0.5461805669466655
      }
    },
    "command_relevance": [
      {
        "command": "ssh-agent",
        "relevance_score": 0.62
      },
      {
        "command": "ssh-copy-id",
        "relevance_score": 0.62
      },
      {
        "command": "ssh",
        "relevance_score": 0.62
      },
      {
        "command": "ssh-keygen",
        "relevance_score": 0.5800000000000001
      },
      {
        "command": "sftp",
        "relevance_score": 0.32
      }
    ]
  },
  "command_chains": {
    "next_commands": [
      "rsync",
      "sftp",
      "ssh-add",
      "ssh-keyscan",
      "ssh-keygen"
    ],
    "command_chains": [
      "ssh-agent | rsync",
      "ssh-agent | sftp",
      "ssh-agent | ssh-add"
    ]
  }
}